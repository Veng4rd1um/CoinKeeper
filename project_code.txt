# PROJECT CODE COMPILATION
# Generated on 05/11/2025 22:14:17
# Source: C:\Users\Алихан\Documents\CoinKeeper


###############################################################################
# FILE: eslint.config.js
###############################################################################

// .eslintrc.cjs
module.exports = {
  root: true,
  env: { browser: true, es2020: true, node: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'], // Убрал 'server' отсюда
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    'react/prop-types': 'off',
    'no-unused-vars': ['warn', {
      'vars': 'all',
      'args': 'after-used',
      'ignoreRestSiblings': false,
      'varsIgnorePattern': '^_',
      'argsIgnorePattern': '^_',
    }],
  },
  overrides: [
    {
      files: ['server/**/*.cjs'], // Указываем .cjs для серверных файлов
      env: { node: true, es2020: true },
      parserOptions: { sourceType: 'commonjs' },
      rules: {
        // Здесь можно добавить специфичные правила для Node.js или отключить браузерные
        // no-undef для require, module, __dirname, process уже должен обрабатываться env: { node: true }
        // Если все еще есть проблемы, можно явно добавить:
        // 'no-undef': 'off',
      }
    },
    {
      files: ['*.config.js', '*.cjs'], // Для vite.config.js, postcss.config.js, tailwind.config.js, eslintrc.cjs
      env: { node: true, es2020: true },
      // sourceType для .config.js (ESM) и .cjs (CommonJS) будет разный.
      // ESLint должен сам определить по расширению или настройкам package.json
      // Для явности можно разделить:
    },
    {
      files: ['*.config.js'], // vite.config.js, tailwind.config.js, postcss.config.js (если они ESM)
      env: { node: true, es2020: true },
      parserOptions: { sourceType: 'module' },
    },
    {
      files: ['*.cjs'], // eslintrc.cjs, серверные .cjs
      env: { node: true, es2020: true },
      parserOptions: { sourceType: 'commonjs' },
    }
  ]
};

###############################################################################
# FILE: get_project_code.bat
###############################################################################

@echo off
echo Running code collection script...
powershell.exe -ExecutionPolicy Bypass -File "%~dp0CollectCode.ps1"

###############################################################################
# FILE: index.html
###############################################################################

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/free-icon-coin-4153647.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CoinKepper</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


###############################################################################
# FILE: package.json
###############################################################################

{
  "name": "coin-keeper",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "server": "node server/server.cjs",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.3",
    "axios": "^1.6.8",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-input-color": "^4.0.1",
    "react-router-dom": "^6.22.3",
    "recharts": "^2.12.5",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.7",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "vite": "^5.2.0"
  }
}


###############################################################################
# FILE: postcss.config.js
###############################################################################

// postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

###############################################################################
# FILE: README.md
###############################################################################

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.


###############################################################################
# FILE: tailwind.config.js
###############################################################################

// tailwind.config.js
import formsPlugin from '@tailwindcss/forms';
import defaultTheme from 'tailwindcss/defaultTheme'; // Для fontFamily
import colors from 'tailwindcss/colors'; // Для цветов

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        background: {
          DEFAULT: colors.slate[100],
          dark: '#1A1B2F',
        },
        surface: {
          DEFAULT: colors.white,
          dark: colors.slate[800],
        },
        primary: {
          DEFAULT: '#037DD6',
          hover: '#006BC7',
          dark: '#2F72FA',
          dark_hover: '#508BFF',
        },
        secondary: {
          DEFAULT: colors.slate[600],
          dark: colors.slate[400],
        },
        accent: {
          DEFAULT: colors.amber[500],
          dark: colors.amber[400],
        },
        text: {
          DEFAULT: colors.slate[800],
          dark: colors.slate[200],
          muted: colors.slate[500],
          dark_muted: colors.slate[400],
        },
        success: {
          DEFAULT: colors.green[600],
          dark: colors.green[500],
        },
        error: {
          DEFAULT: colors.red[600],
          dark: colors.red[500],
        },
        warning: {
          DEFAULT: colors.amber[500],
          dark: colors.amber[400],
        },
        // Сохраненные для совместимости с формами логина/регистрации, если не успели их полностью переделать
        authFormBg: `rgba(30, 41, 59, 0.85)`,
        authInputBg: colors.slate[700],
        authInputBorder: colors.slate[600],
        authPlaceholder: colors.slate[400],
      },
      fontFamily: {
        sans: ['Inter', ...defaultTheme.fontFamily.sans],
      },
      keyframes: {
        'modal-scale-in': {
          '0%': { opacity: '0', transform: 'scale(0.90) translateY(-20px)' },
          '100%': { opacity: '1', transform: 'scale(1) translateY(0px)' },
        }
      },
      animation: {
        'modal-scale-in': 'modal-scale-in 0.3s ease-out forwards',
      }
    },
  },
  plugins: [
    formsPlugin,
  ],
};

###############################################################################
# FILE: vite.config.js
###############################################################################

// vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
});

###############################################################################
# FILE: src\App.jsx
###############################################################################

import React from 'react';
import AppRouter from './routes/AppRouter.jsx';

function App() {
    return (
        <AppRouter />
    );
}

export default App;

###############################################################################
# FILE: src\index.css
###############################################################################

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-background text-text antialiased;
    font-family: theme('fontFamily.sans');
  }
  .dark body {
    @apply bg-background-dark text-text-dark;
  }
}

.sidebar-link-active {
  @apply bg-primary text-white font-semibold;
}
.dark .sidebar-link-active {
  @apply bg-primary-dark text-white;
}

.sidebar-link-active svg {
  @apply text-white;
}

###############################################################################
# FILE: src\main.jsx
###############################################################################

// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
import { AuthProvider } from './context/AuthContext.jsx';
import { BrowserRouter } from 'react-router-dom'; // BrowserRouter здесь, если App его не содержит

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <BrowserRouter> {/* Обертка BrowserRouter здесь, чтобы AuthContext имел доступ к navigate */}
            <AuthProvider>
                <App />
            </AuthProvider>
        </BrowserRouter>
    </React.StrictMode>,
);

###############################################################################
# FILE: server\data\categories.json
###############################################################################

{
  "income": [
    { "id": "cat_inc_1", "name": "Зарплата", "color": "#22c55e" },
    { "id": "cat_inc_2", "name": "Фриланс", "color": "#3b82f6" },
    { "id": "cat_inc_3", "name": "Подарки", "color": "#eab308" }
  ],
  "expense": [
    { "id": "cat_exp_1", "name": "Продукты", "color": "#f97316" },
    { "id": "cat_exp_2", "name": "Транспорт", "color": "#0ea5e9" },
    { "id": "cat_exp_3", "name": "Развлечения", "color": "#a855f7" },
    { "id": "cat_exp_4", "name": "Коммунальные услуги", "color": "#ef4444" }
  ]
}

###############################################################################
# FILE: server\data\categories_101f19eb-9bb8-4a2b-bb87-916ae309062d.json
###############################################################################

{
  "income": [],
  "expense": [
    {
      "id": "cat_exp_adf021",
      "name": "фцвц"
    },
    {
      "id": "cat_exp_546648",
      "name": "фцвц"
    }
  ]
}

###############################################################################
# FILE: server\data\categories_7c8dc353-1978-4f2c-ada5-8e9a8ebe1d6d.json
###############################################################################

{
  "income": [
    {
      "id": "cat_inc_f3d0f1",
      "name": "чай"
    },
    {
      "id": "cat_inc_b86d47",
      "name": "ыуау"
    }
  ],
  "expense": []
}

###############################################################################
# FILE: server\data\categories_b75a901d-022c-42ab-8524-5fe400886068.json
###############################################################################

{
  "income": [
    {
      "id": "cat_inc_f3cfc2",
      "name": "зп"
    },
    {
      "id": "cat_inc_fd403a",
      "name": "фыфы"
    }
  ],
  "expense": [
    {
      "id": "cat_exp_a534e4",
      "name": "крфе"
    },
    {
      "id": "cat_exp_73fbde",
      "name": "awdawd"
    },
    {
      "id": "cat_exp_915ee1",
      "name": "уаыуа"
    },
    {
      "id": "cat_exp_faf24c",
      "name": "фцвцфвф"
    },
    {
      "id": "cat_exp_fd3417",
      "name": "фцвфцв"
    }
  ]
}

###############################################################################
# FILE: server\data\categories_cbff5c62-37a1-4b73-a5cb-3f7e8ec417d5.json
###############################################################################

{
  "income": [
    {
      "id": "cat_inc_e512bf",
      "name": "фцвфцв"
    },
    {
      "id": "cat_inc_27170f",
      "name": "фвфцв"
    }
  ],
  "expense": [
    {
      "id": "cat_exp_a98efb",
      "name": "аываы"
    }
  ]
}

###############################################################################
# FILE: server\data\categories_cf55b2ed-65d6-49bf-8c81-7e6172b57401.json
###############################################################################

{
  "income": [],
  "expense": []
}

###############################################################################
# FILE: server\data\categories_fdbc9681-3fd1-4c67-86cb-e205953497b4.json
###############################################################################

{
  "income": [
    {
      "id": "cat_inc_d41c80",
      "name": "фцвц"
    }
  ],
  "expense": [
    {
      "id": "cat_exp_bb9b29",
      "name": "Такси"
    },
    {
      "id": "cat_exp_2ddc85",
      "name": "фвфц"
    }
  ]
}

###############################################################################
# FILE: server\data\transactions.json
###############################################################################

[
  {
    "id": "t_1",
    "type": "income",
    "amount": 50000,
    "categoryId": "cat_inc_1",
    "date": "2024-05-20T00:00:00.000Z",
    "comment": "Аванс за май"
  },
  {
    "id": "t_2",
    "type": "expense",
    "amount": 3250.50,
    "categoryId": "cat_exp_1",
    "date": "2024-05-21T00:00:00.000Z",
    "comment": "Супермаркет МегаМарт"
  }
]

###############################################################################
# FILE: server\data\transactions_101f19eb-9bb8-4a2b-bb87-916ae309062d.json
###############################################################################

[
  {
    "id": "txn_17460362",
    "type": "expense",
    "amount": 1000,
    "categoryId": "cat_exp_adf021",
    "date": "2025-05-10T00:00:00.000Z",
    "comment": ""
  }
]

###############################################################################
# FILE: server\data\transactions_7c8dc353-1978-4f2c-ada5-8e9a8ebe1d6d.json
###############################################################################

[
  {
    "id": "txn_b6907e49",
    "type": "income",
    "amount": 1000,
    "categoryId": "cat_inc_fcda5d",
    "date": "2025-05-12T00:00:00.000Z",
    "comment": "Мтеро "
  },
  {
    "id": "txn_faf88dba",
    "type": "expense",
    "amount": 60,
    "categoryId": "cat_exp_8ebb62",
    "date": "2025-05-13T00:00:00.000Z",
    "comment": "Делюкс"
  },
  {
    "id": "txn_aa2c429b",
    "type": "expense",
    "amount": 100,
    "categoryId": "cat_exp_e3a111",
    "date": "2025-05-12T00:00:00.000Z",
    "comment": ""
  },
  {
    "id": "txn_1f0ad72e",
    "type": "income",
    "amount": 1000,
    "categoryId": "cat_inc_f3d0f1",
    "date": "2025-05-11T00:00:00.000Z",
    "comment": ""
  },
  {
    "id": "txn_3b05ead6",
    "type": "expense",
    "amount": 100,
    "categoryId": "cat_exp_305d8b",
    "date": "2025-05-11T00:00:00.000Z",
    "comment": ""
  },
  {
    "id": "txn_1f61ecda",
    "type": "expense",
    "amount": 50000,
    "categoryId": "cat_exp_8ebb62",
    "date": "2025-05-11T00:00:00.000Z",
    "comment": ""
  }
]

###############################################################################
# FILE: server\data\transactions_b75a901d-022c-42ab-8524-5fe400886068.json
###############################################################################

[
  {
    "id": "txn_cfb0af7b",
    "type": "income",
    "amount": 2000,
    "categoryId": "cat_inc_f3cfc2",
    "date": "2025-05-10T00:00:00.000Z",
    "comment": ""
  },
  {
    "id": "txn_7823d86d",
    "type": "expense",
    "amount": 2200,
    "categoryId": "cat_exp_915ee1",
    "date": "2025-05-10T00:00:00.000Z",
    "comment": ""
  },
  {
    "id": "txn_3d831d16",
    "type": "expense",
    "amount": 1000,
    "categoryId": "cat_exp_faf24c",
    "date": "2025-05-10T00:00:00.000Z",
    "comment": ""
  }
]

###############################################################################
# FILE: server\data\transactions_cbff5c62-37a1-4b73-a5cb-3f7e8ec417d5.json
###############################################################################

[
  {
    "id": "txn_4f03d616",
    "type": "income",
    "amount": 1203203,
    "categoryId": "cat_inc_e512bf",
    "date": "2025-05-11T00:00:00.000Z",
    "comment": ""
  },
  {
    "id": "txn_0f1823b3",
    "type": "expense",
    "amount": 565465,
    "categoryId": "cat_exp_a98efb",
    "date": "2025-05-11T00:00:00.000Z",
    "comment": ""
  }
]

###############################################################################
# FILE: server\data\transactions_cf55b2ed-65d6-49bf-8c81-7e6172b57401.json
###############################################################################

[]

###############################################################################
# FILE: server\data\transactions_fdbc9681-3fd1-4c67-86cb-e205953497b4.json
###############################################################################

[
  {
    "id": "txn_c64cfd3e",
    "type": "expense",
    "amount": 1000,
    "categoryId": "cat_exp_bb9b29",
    "date": "2025-05-10T00:00:00.000Z",
    "comment": ""
  }
]

###############################################################################
# FILE: server\data\users.json
###############################################################################

[
  {
    "id": "cf55b2ed-65d6-49bf-8c81-7e6172b57401",
    "email": "test@email.com",
    "password": "$2a$12$Rk5j5J963jLke4GkXf74keWbsgT/S4t6EUgYAj.nIIm4hE/Jts9A."
  },
  {
    "id": "b75a901d-022c-42ab-8524-5fe400886068",
    "email": "test1@email.com",
    "password": "$2a$12$V3aJyvs3mlq.fk5N9QYVGufpej.pLNtlHQ8Zg0ujD9d/HuaOdZwrW"
  },
  {
    "id": "7c8dc353-1978-4f2c-ada5-8e9a8ebe1d6d",
    "email": "test3@email.com",
    "password": "$2a$12$AzDgkI6WXYdBgyOi08rgz.IA7.EdQrIu/T805A6WxJfJjl.yhCvoS"
  },
  {
    "id": "fdbc9681-3fd1-4c67-86cb-e205953497b4",
    "email": "Alikhan@email.com",
    "password": "$2a$12$TTTpk8knVNmhAGVGooqesecd9Yo0HRotd5Wam7mKBvljpYG8dRk1W"
  }
]

###############################################################################
# FILE: server\utils\dataUtils.cjs.js
###############################################################################

// server/utils/dataUtils.cjs
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const dataDir = path.join(__dirname, '..', 'data'); // Путь к папке data

// Helper to read JSON file
const readDataFile = async (fileName) => {
    try {
        const filePath = path.join(dataDir, fileName);
        await fs.access(filePath); // Check if file exists
        const data = await fs.readFile(filePath, 'utf-8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') { // File not found
            // For users.json, return empty array. For others, it might indicate an issue or initial state.
            if (fileName === 'users.json') return [];
            if (fileName.startsWith('categories_') || fileName.startsWith('transactions_')) {
                // For categories, return default structure, for transactions empty array
                return fileName.startsWith('categories_') ? { income: [], expense: [] } : [];
            }
        }
        console.error(`Error reading ${fileName}:`, error);
        throw new Error(`Could not read data file ${fileName}`);
    }
};

// Helper to write JSON file
const writeDataFile = async (fileName, data) => {
    try {
        const filePath = path.join(dataDir, fileName);
        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error(`Error writing ${fileName}:`, error);
        throw new Error(`Could not write data file ${fileName}`);
    }
};

// Ensure data directory exists
const ensureDataDirExists = async () => {
    try {
        await fs.access(dataDir);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.mkdir(dataDir, { recursive: true });
            console.log(`Data directory created: ${dataDir}`);
        } else {
            throw error;
        }
    }
};

const defaultCategoryIconName = 'QuestionMarkCircleIcon';

module.exports = {
    // ...
    defaultCategoryIconName,
};

module.exports = {
    readDataFile,
    writeDataFile,
    ensureDataDirExists,
    uuidv4,
    dataDir // Export dataDir if needed elsewhere directly, though unlikely
};

###############################################################################
# FILE: src\api\index.js
###############################################################################

// src/api/index.js
import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001/api';

const apiClient = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
});

// Transactions API
export const fetchTransactions = () => apiClient.get('/transactions');
export const addTransaction = (transactionData) => apiClient.post('/transactions', transactionData);
export const updateTransaction = (id, transactionData) => apiClient.put(`/transactions/${id}`, transactionData);
export const deleteTransaction = (id) => apiClient.delete(`/transactions/${id}`);

// Categories API
export const fetchCategories = () => apiClient.get('/categories');
export const addCategory = (categoryData) => apiClient.post('/categories', categoryData);
export const updateCategory = (type, id, categoryData) => apiClient.put(`/categories/${type}/${id}`, categoryData);
export const deleteCategoryAPI = (type, id) => apiClient.delete(`/categories/${type}/${id}`);

export default apiClient; // Экспортируем сам инстанс axios для прямых вызовов, если нужно

###############################################################################
# FILE: src\context\AuthContext.jsx
###############################################################################

// src/context/AuthContext.jsx
import React, { createContext, useState, useEffect, useCallback, useContext } from 'react';
import apiClient from '../api/index.js'; // ИСПРАВЛЕННЫЙ ПУТЬ
import { useNavigate, useLocation } from 'react-router-dom';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [token, setToken] = useState(localStorage.getItem('authToken'));
    const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));
    const [isLoadingAuth, setIsLoadingAuth] = useState(true);
    const navigate = useNavigate();
    const location = useLocation();

    const setAuthData = useCallback((newToken, userData) => {
        localStorage.setItem('authToken', newToken);
        localStorage.setItem('authUser', JSON.stringify(userData));
        setToken(newToken);
        setUser(userData);
        if (apiClient.defaults.headers) { // Проверка на существование headers
            apiClient.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
        } else {
            apiClient.defaults.headers = { common: { 'Authorization': `Bearer ${newToken}` } };
        }
    }, []);

    const logout = useCallback(() => {
        localStorage.removeItem('authToken');
        localStorage.removeItem('authUser');
        setToken(null);
        setUser(null);
        if (apiClient.defaults.headers?.common) { // Проверка перед удалением
            delete apiClient.defaults.headers.common['Authorization'];
        }
        navigate('/login', { replace: true });
    }, [navigate]);

    useEffect(() => {
        const storedToken = localStorage.getItem('authToken');
        const storedUser = JSON.parse(localStorage.getItem('authUser'));

        if (storedToken && storedUser) {
            if (apiClient.defaults.headers) {
                apiClient.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;
            } else {
                apiClient.defaults.headers = { common: { 'Authorization': `Bearer ${storedToken}` } };
            }

            // Используем fetchTransactions для проверки токена, т.к. он экспортируется из api/index.js
            import('../api/index.js').then(apiModule => { // Динамический импорт, если есть проблемы с цикличностью
                apiModule.fetchTransactions()
                    .then(() => {
                        setToken(storedToken);
                        setUser(storedUser);
                    })
                    .catch((error) => {
                        console.warn("Token validation failed (AuthContext):", error.response?.data?.message || error.message);
                        logout();
                    })
                    .finally(() => {
                        setIsLoadingAuth(false);
                    });
            }).catch(err => {
                console.error("Failed to dynamically import api/index.js in AuthContext", err);
                setIsLoadingAuth(false); // Все равно завершаем загрузку
            });
        } else {
            setIsLoadingAuth(false);
        }
    }, [logout]); // logout теперь в зависимостях

    const login = async (email, password) => {
        try {
            const response = await apiClient.post('/auth/login', { email, password });
            const { token: newToken, userId, email: userEmail } = response.data;
            setAuthData(newToken, { id: userId, email: userEmail });
            const from = location.state?.from?.pathname || "/dashboard";
            navigate(from, { replace: true });
            return { success: true };
        } catch (error) {
            console.error("Login failed:", error.response?.data?.message || error.message);
            return { success: false, message: error.response?.data?.message || "Ошибка входа. Проверьте данные." };
        }
    };

    const register = async (email, password) => {
        try {
            const response = await apiClient.post('/auth/register', { email, password });
            return { success: true, message: response.data.message };
        } catch (error) {
            console.error("Registration failed:", error.response?.data?.message || error.message);
            return { success: false, message: error.response?.data?.message || "Ошибка регистрации. Попробуйте другой email." };
        }
    };

    const value = {
        token,
        user,
        isAuthenticated: !!token,
        isLoadingAuth,
        login,
        register,
        logout,
        // setAuthData // не нужно экспортировать наружу, если используется только внутри
    };

    return (
        <AuthContext.Provider value={value}>
            {!isLoadingAuth && children} {/* Рендерим детей только после завершения проверки авторизации */}
            {isLoadingAuth && ( /* Показываем глобальный лоадер, если нужно */
                <div className="fixed inset-0 flex justify-center items-center bg-background-dark z-[9999]">
                    <p className="text-xl text-text-dark">Загрузка...</p>
                </div>
            )}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

###############################################################################
# FILE: src\pages\DashboardPage.jsx
###############################################################################

// src/pages/DashboardPage.jsx
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import Button from '../components/ui/Button.jsx';
import TransactionModal from '../components/transactions/TransactionModal.jsx';
import {
    fetchTransactions,
    addTransaction as apiAddTransaction,
    updateTransaction as apiUpdateTransaction,
    deleteTransaction as apiDeleteTransaction,
    fetchCategories // Убедитесь, что эта функция импортирована
} from '../api/index.js';
import {
    PlusCircleIcon, WalletIcon, ArrowTrendingUpIcon, ArrowTrendingDownIcon,
    PencilSquareIcon, ExclamationTriangleIcon, InformationCircleIcon
} from '@heroicons/react/24/outline';
import { useAuth } from '../context/AuthContext.jsx';
import { CategoryIcon, defaultCategoryIconName } from '../components/ui/CategoryIcons.jsx'; // Импортируем для иконок

const defaultCategoryColorForDisplay = "bg-slate-400 dark:bg-slate-600"; // Для "Без категории"

const formatCurrency = (amount, currency = 'RUB', showDecimals = true) => {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: currency,
        minimumFractionDigits: showDecimals ? 2 : 0,
        maximumFractionDigits: showDecimals ? 2 : 0
    }).format(amount);
};
const formatDateForDisplay = (isoDateString) => {
    if (!isoDateString) return 'N/A';
    const date = new Date(isoDateString);
    return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
};

const SummaryCard = ({ title, amount, icon, trend, trendText, colorClass = "text-text dark:text-text-dark" }) => {
    const IconComponent = icon;
    return (
        <div className="bg-surface dark:bg-surface-dark p-5 rounded-xl shadow-lg hover:shadow-primary/20 dark:hover:shadow-primary-dark/20 transition-shadow duration-200 border border-transparent hover:border-primary/30 dark:hover:border-primary-dark/30">
            <div className="flex justify-between items-start mb-1">
                <h3 className="text-sm font-medium text-text-muted dark:text-text-dark_muted">{title}</h3>
                {IconComponent && <IconComponent className={`h-7 w-7 ${colorClass} opacity-70`} />}
            </div>
            <p className={`text-3xl font-bold ${colorClass} tracking-tight`}>
                {formatCurrency(amount, 'RUB', !Number.isInteger(amount))}
            </p>
            {trend && trendText && (
                <p className={`text-xs mt-1.5 flex items-center ${trend === 'up' ? 'text-success dark:text-success-dark' : 'text-error dark:text-error-dark'}`}>
                    {trend === 'up' ? <ArrowTrendingUpIcon className="h-3.5 w-3.5 mr-1" /> : <ArrowTrendingDownIcon className="h-3.5 w-3.5 mr-1" />}
                    {trendText}
                </p>
            )}
        </div>
    );
};

const DashboardPage = () => {
    const { user } = useAuth();
    const [transactions, setTransactions] = useState([]);
    // allCategoriesData не используется напрямую для рендера, но нужен для обогащения транзакций
    // const [allCategoriesData, setAllCategoriesData] = useState({ income: [], expense: [] }); // Можно удалить, если не нужен нигде кроме loadInitialData
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [transactionToEdit, setTransactionToEdit] = useState(null);

    const loadInitialData = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            const [transactionsRes, categoriesRes] = await Promise.all([
                fetchTransactions(),
                fetchCategories()
            ]);

            const fetchedTransactions = transactionsRes.data || [];
            const fetchedCategories = categoriesRes.data || { income: [], expense: [] };

            const categoryMap = {};
            (fetchedCategories.income || []).forEach(cat => categoryMap[cat.id] = cat);
            (fetchedCategories.expense || []).forEach(cat => categoryMap[cat.id] = cat);

            const enrichedTransactions = fetchedTransactions.map(t => {
                const category = categoryMap[t.categoryId];
                return {
                    ...t,
                    categoryName: category?.name || 'Без категории',
                    categoryColor: category?.color || defaultCategoryColorForDisplay,
                    categoryIcon: category?.icon || defaultCategoryIconName // Это ключевая строка
                };
            }).sort((a,b) => new Date(b.date) - new Date(a.date));

            setTransactions(enrichedTransactions);

        } catch (err) {
            console.error("Failed to load initial data:", err.response?.data?.message || err.message);
            setError(err.response?.data?.message || "Не удалось загрузить данные. Попробуйте обновить страницу.");
        }
        setIsLoading(false);
    }, []);

    useEffect(() => {
        loadInitialData();
    }, [loadInitialData]);

    const monthlyStats = useMemo(() => {
        const now = new Date();
        const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);
        const currentMonthTransactions = transactions.filter(t => new Date(t.date) >= currentMonthStart);

        let income = 0;
        let expense = 0;
        currentMonthTransactions.forEach(t => {
            if (t.type === 'income') income += parseFloat(t.amount);
            else expense += parseFloat(t.amount);
        });
        return { income, expense };
    }, [transactions]);

    const currentBalance = useMemo(() => {
        return transactions.reduce((acc, t) => {
            const amount = parseFloat(t.amount);
            return t.type === 'income' ? acc + amount : acc - amount;
        }, 0);
    }, [transactions]);


    const openAddModal = () => {
        setTransactionToEdit(null);
        setIsModalOpen(true);
    };

    const openEditModal = (transaction) => {
        // Передаем "сырую" транзакцию (без categoryName, categoryColor, categoryIcon)
        // Модальное окно само будет работать с categoryId
        const rawTransaction = transactions.find(t => t.id === transaction.id);
        if (rawTransaction) {
            // Удаляем обогащенные поля, чтобы не было конфликтов
            const { categoryName, categoryColor, categoryIcon, ...rest } = rawTransaction;
            setTransactionToEdit(rest);
        } else {
            setTransactionToEdit(transaction); // Fallback
        }
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setTransactionToEdit(null);
    };

    // Этот обработчик передается в TransactionModal
    const handleModalFormSubmit = async (transactionDataFromModal) => {
        try {
            if (transactionToEdit) { // Редактирование
                await apiUpdateTransaction(transactionToEdit.id, transactionDataFromModal);
            } else { // Добавление
                await apiAddTransaction(transactionDataFromModal);
            }
            loadInitialData(); // Перезагружаем все данные для обновления
            closeModal();
        } catch (err) {
            console.error("Failed to save transaction from modal:", err);
            // Можно отобразить ошибку в модальном окне или как alert
            alert(`Ошибка сохранения транзакции: ${err.response?.data?.message || err.message}`);
        }
    };

    const handleDeleteTransaction = async (transactionId) => {
        if (window.confirm("Вы уверены, что хотите удалить эту транзакцию?")) {
            try {
                await apiDeleteTransaction(transactionId);
                loadInitialData();
                closeModal(); // Закрываем модальное, если оно было открыто для этой транзакции
            } catch (err) {
                console.error("Failed to delete transaction:", err);
                alert(`Ошибка удаления транзакции: ${err.response?.data?.message || err.message}`);
            }
        }
    };

    const TransactionItem = ({ transaction, onEdit }) => {
        const isIncome = transaction.type === 'income';
        const amountColor = isIncome ? 'text-success dark:text-success-dark' : 'text-error dark:text-error-dark';
        const sign = isIncome ? '+' : '-';

        // Используем данные, обогащенные в loadInitialData
        const categoryColor = transaction.categoryColor;
        const categoryIconName = transaction.categoryIcon;

        return (
            <li className="bg-surface dark:bg-surface-dark p-3 sm:p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-150 ease-in-out group">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3 min-w-0 flex-1">
                        <div className={`p-1.5 sm:p-2 rounded-full ${categoryColor} flex-shrink-0 shadow-sm`}>
                            <CategoryIcon iconName={categoryIconName} className="w-4 h-4 sm:w-5 sm:h-5 text-white" />
                        </div>
                        <div className="min-w-0">
                            <p className="text-sm font-medium text-text dark:text-text-dark truncate" title={transaction.categoryName}>{transaction.categoryName}</p>
                            <p className="text-xs text-text-muted dark:text-text-dark_muted truncate max-w-[150px] sm:max-w-xs" title={transaction.comment || 'Без описания'}>
                                {transaction.comment || 'Без описания'}
                            </p>
                        </div>
                    </div>
                    <div className="text-right flex flex-col items-end ml-2 flex-shrink-0">
                        <p className={`text-sm font-semibold ${amountColor} whitespace-nowrap`}>
                            {sign} {formatCurrency(parseFloat(transaction.amount), 'RUB', true).replace(/\s?₽/, '')} <span className="text-xs text-text-muted dark:text-text-dark_muted">₽</span>
                        </p>
                        <p className="text-xs text-text-muted dark:text-text-dark_muted mt-0.5">{formatDateForDisplay(transaction.date)}</p>
                    </div>
                    <button
                        onClick={() => onEdit(transaction)}
                        className="ml-2 text-text-muted dark:text-text-dark_muted hover:text-primary dark:hover:text-primary-dark opacity-0 group-hover:opacity-100 transition-opacity focus:opacity-100 p-1 rounded-md flex-shrink-0"
                        title="Редактировать транзакцию"
                    >
                        <PencilSquareIcon className="h-4 w-4 sm:h-5 sm:h-5"/>
                    </button>
                </div>
            </li>
        );
    };

    if (isLoading && transactions.length === 0) {
        return (
            <div className="flex justify-center items-center h-64">
                <p className="text-lg text-text-muted dark:text-text-dark_muted">Загрузка данных...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="text-center py-10 px-6 bg-error/10 dark:bg-error-dark/20 rounded-lg shadow border border-error/30 dark:border-error-dark/50">
                <ExclamationTriangleIcon className="h-12 w-12 text-error dark:text-error-dark mx-auto mb-3" />
                <h3 className="text-lg font-medium text-error dark:text-error-dark">{error}</h3>
                <p className="text-sm text-text-muted dark:text-text-dark_muted mt-1">
                    Пожалуйста, проверьте ваше интернет-соединение или работу сервера.
                </p>
            </div>
        );
    }
    const userName = user?.email?.split('@')[0] || 'пользователь';

    return (
        <div className="space-y-6 md:space-y-8">
            <header className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                    <h1 className="text-2xl sm:text-3xl font-semibold text-text dark:text-text-dark">
                        Добро пожаловать, <span className="capitalize">{userName}</span>!
                    </h1>
                    <p className="text-sm text-text-muted dark:text-text-dark_muted">
                        Обзор ваших финансов.
                    </p>
                </div>
                <Button
                    onClick={openAddModal}
                    variant="primary"
                    className="w-full sm:w-auto py-2.5 px-5 text-sm"
                    leftIcon={<PlusCircleIcon className="h-5 w-5"/>}
                >
                    Добавить операцию
                </Button>
            </header>

            <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
                <SummaryCard title="Текущий баланс" amount={currentBalance} icon={WalletIcon} colorClass="text-primary dark:text-primary-dark" />
                <SummaryCard title="Доходы (этот месяц)" amount={monthlyStats.income} icon={ArrowTrendingUpIcon} colorClass="text-success dark:text-success-dark" />
                <SummaryCard title="Расходы (этот месяц)" amount={monthlyStats.expense} icon={ArrowTrendingDownIcon} colorClass="text-error dark:text-error-dark" />
            </section>

            <section>
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-text dark:text-text-dark">Недавние операции</h2>
                    {/* Можно добавить ссылку на страницу "Все транзакции", если таковая будет */}
                </div>
                {transactions.length > 0 ? (
                    <ul className="space-y-3">
                        {transactions.slice(0, 7).map((transaction) => ( // Показываем последние 7 для примера
                            <TransactionItem key={transaction.id} transaction={transaction} onEdit={openEditModal} />
                        ))}
                    </ul>
                ) : (
                    <div className="text-center py-10 px-6 bg-surface dark:bg-surface-dark rounded-lg shadow">
                        <InformationCircleIcon className="h-12 w-12 text-text-muted dark:text-text-dark_muted mx-auto mb-3" />
                        <h3 className="text-lg font-medium text-text dark:text-text-dark">Транзакций пока нет</h3>
                        <p className="text-sm text-text-muted dark:text-text-dark_muted mt-1 mb-4">
                            Начните отслеживать свои финансы, добавив первую операцию.
                        </p>
                        <Button onClick={openAddModal} variant="secondary" leftIcon={<PlusCircleIcon className="h-5 w-5"/>}>
                            Добавить первую транзакцию
                        </Button>
                    </div>
                )}
            </section>

            <TransactionModal
                isOpen={isModalOpen}
                onClose={closeModal}
                onSubmit={handleModalFormSubmit} // Передаем наш новый обработчик
                transactionToEdit={transactionToEdit}
                onDelete={handleDeleteTransaction}
            />
        </div>
    );
};
export default DashboardPage;

###############################################################################
# FILE: src\pages\SettingsPage.jsx
###############################################################################

// src/pages/SettingsPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import Button from '../components/ui/Button.jsx';
import Input from '../components/ui/Input.jsx';
import { fetchCategories, addCategory, updateCategory, deleteCategoryAPI } from '../api/index.js';
import {
    XMarkIcon, CheckIcon, ExclamationTriangleIcon, InformationCircleIcon, PencilIcon, TrashIcon // Добавил недостающие иконки для кнопок
} from '@heroicons/react/24/outline';
import { CategoryIcon, availableIconsForPicker, defaultCategoryIconName } from '../components/ui/CategoryIcons.jsx';

const categoryColorPalette = [
    'bg-red-400', 'bg-orange-400', 'bg-amber-400', 'bg-yellow-400', 'bg-lime-400', 'bg-green-400',
    'bg-emerald-400', 'bg-teal-400', 'bg-cyan-400', 'bg-sky-400', 'bg-blue-400', 'bg-indigo-400',
    'bg-violet-400', 'bg-purple-400', 'bg-fuchsia-400', 'bg-pink-400', 'bg-rose-400', 'bg-slate-400'
];
const defaultNewCategoryColor = 'bg-sky-400';

const CategoryModal = ({ isOpen, onClose, onSubmit, categoryToEdit, currentCategories }) => {
    const [name, setName] = useState('');
    const [type, setType] = useState('expense');
    const [selectedColor, setSelectedColor] = useState(defaultNewCategoryColor);
    const [selectedIconName, setSelectedIconName] = useState(defaultCategoryIconName);
    const [error, setError] = useState('');

    const isEditing = !!categoryToEdit;

    useEffect(() => {
        if (isOpen) {
            if (isEditing && categoryToEdit) {
                setName(categoryToEdit.name);
                setType(categoryToEdit.originalType || categoryToEdit.type || 'expense'); // Используем originalType если есть
                setSelectedColor(categoryToEdit.color || defaultNewCategoryColor);
                setSelectedIconName(categoryToEdit.icon || defaultCategoryIconName);
            } else {
                setName('');
                setType('expense');
                setSelectedColor(defaultNewCategoryColor);
                setSelectedIconName(defaultCategoryIconName);
            }
            setError('');
        }
    }, [isOpen, categoryToEdit, isEditing]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        if (!name.trim()) {
            setError("Название категории не может быть пустым.");
            return;
        }

        // Проверка на дубликат имени для правильного типа
        // `currentCategories` это { income: [], expense: [] }
        // `type` это 'income' или 'expense' из модального окна
        const categoriesOfType = currentCategories[type] || [];
        const existingCategory = categoriesOfType.find(
            cat => cat.name.toLowerCase() === name.trim().toLowerCase() &&
                (!isEditing || cat.id !== categoryToEdit.id)
        );

        if (existingCategory) {
            setError(`Категория с именем "${name.trim()}" уже существует для типа "${type === 'income' ? 'Доход' : 'Расход'}".`);
            return;
        }

        const categoryData = {
            name: name.trim(),
            type: type, // Этот тип (income/expense) будет использован для создания/обновления
            color: selectedColor,
            icon: selectedIconName,
        };
        // `originalType` нужен, если мы РЕДАКТИРУЕМ категорию и ее тип на бэкенде мог быть другим (хотя наш UI сейчас не позволяет менять тип income/expense)
        onSubmit(categoryData, isEditing ? categoryToEdit.id : null, isEditing ? categoryToEdit.originalType : type);
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto p-4">
            <div className="fixed inset-0 bg-black/70 backdrop-blur-sm" onClick={onClose}></div>
            <div className="relative bg-[#3A3A3A] p-6 rounded-lg shadow-xl w-full max-w-md m-auto transform transition-all duration-300 ease-out scale-95 opacity-0 animate-modal-scale-in text-white border border-gray-700">
                <div className="flex items-center justify-between mb-6">
                    <h2 className="text-xl font-semibold">
                        {isEditing ? 'Редактировать категорию' : 'Добавить категорию'}
                    </h2>
                    <button onClick={onClose} className="text-gray-400 hover:text-white transition-colors" aria-label="Закрыть">
                        <XMarkIcon className="h-6 w-6" />
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-5">
                    <Input
                        id="categoryNameModal" label="Название категории:" type="text" // Уникальный ID для модального инпута
                        value={name} onChange={(e) => setName(e.target.value)}
                        className="bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-amber-500 focus:ring-amber-500"
                        labelClassName="text-gray-300"
                        wrapperClassName="mb-0"
                    />
                    <div>
                        <label className="block mb-1.5 text-sm font-medium text-gray-300">Тип категории:</label>
                        <div className="flex space-x-4">
                            {[{label: 'Расход', value: 'expense'}, {label: 'Доход', value: 'income'}].map(option => (
                                <label key={option.value} className="flex items-center space-x-2 cursor-pointer">
                                    <input
                                        type="radio"
                                        name="categoryTypeModal" // Уникальное имя для группы радиокнопок в модалке
                                        value={option.value}
                                        checked={type === option.value}
                                        onChange={() => setType(option.value)}
                                        className="form-radio h-4 w-4 text-amber-500 bg-gray-600 border-gray-500 focus:ring-amber-500"
                                        disabled={isEditing && categoryToEdit?.originalType && categoryToEdit.originalType !== option.value} // Запрещаем менять тип при редактировании, если он был задан
                                    />
                                    <span className={`text-sm ${isEditing && categoryToEdit?.originalType && categoryToEdit.originalType !== option.value ? 'text-gray-500' : ''}`}>{option.label}</span>
                                </label>
                            ))}
                        </div>
                        {isEditing && categoryToEdit?.originalType && <p className="text-xs text-gray-500 mt-1">Тип категории нельзя изменить после создания.</p>}
                    </div>

                    <div>
                        <label className="block mb-1.5 text-sm font-medium text-gray-300">Цвет:</label>
                        <div className="flex flex-wrap gap-2">
                            {categoryColorPalette.map(color => (
                                <button
                                    type="button" key={color}
                                    onClick={() => setSelectedColor(color)}
                                    className={`w-7 h-7 rounded-full ${color} border-2 transition-all
                                        ${selectedColor === color ? 'ring-2 ring-offset-2 ring-offset-gray-700 ring-white scale-110' : 'border-transparent hover:opacity-80'}`}
                                    aria-label={`Выбрать цвет ${color}`}
                                />
                            ))}
                        </div>
                    </div>

                    <div>
                        <label className="block mb-1.5 text-sm font-medium text-gray-300">Иконка:</label>
                        <div className="grid grid-cols-6 sm:grid-cols-8 gap-2 p-2 bg-gray-700/50 rounded-md max-h-32 overflow-y-auto">
                            {availableIconsForPicker.map(iconItem => (
                                <button
                                    type="button" key={iconItem.name}
                                    onClick={() => setSelectedIconName(iconItem.name)}
                                    className={`p-1.5 rounded-md flex items-center justify-center transition-all
                                        ${selectedIconName === iconItem.name ? 'bg-amber-500 text-white scale-110' : 'bg-gray-600 hover:bg-gray-500 text-gray-300'}`}
                                    aria-label={`Выбрать иконку ${iconItem.name.replace('Icon', '')}`}
                                >
                                    <iconItem.Component className="w-5 h-5" />
                                </button>
                            ))}
                        </div>
                    </div>

                    <div className="mt-4 p-3 bg-gray-700/50 rounded-md">
                        <p className="text-sm font-medium text-gray-300 mb-1">Предпросмотр:</p>
                        <div className="flex items-center space-x-3">
                            <div className={`p-2 rounded-full ${selectedColor}`}>
                                <CategoryIcon iconName={selectedIconName} className="w-5 h-5 text-white" />
                            </div>
                            <div>
                                <p className="font-medium text-white">{name || "Название категории"}</p>
                                <p className="text-xs text-gray-400">
                                    {type === 'income' ? "Только доход" : "Только расход"}
                                </p>
                            </div>
                        </div>
                    </div>

                    {error && <p className="mt-2 text-xs text-red-400 text-center">{error}</p>}

                    <div className="flex justify-end space-x-3 pt-5">
                        <Button type="button" onClick={onClose} className="bg-gray-600 hover:bg-gray-500 text-gray-200 px-6">Отмена</Button>
                        <Button type="submit" className="bg-amber-500 hover:bg-amber-600 text-white px-6">Сохранить</Button>
                    </div>
                </form>
            </div>
        </div>
    );
};


const SettingsPage = () => {
    const [categories, setCategories] = useState({ income: [], expense: [] });
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [categoryToEdit, setCategoryToEdit] = useState(null);

    const loadCategories = useCallback(async () => {
        setIsLoading(true); // Устанавливаем isLoading в true перед загрузкой
        setError(null);
        try {
            const response = await fetchCategories();
            const fetched = response.data || { income: [], expense: [] };
            fetched.income = (fetched.income || []).map(cat => ({ ...cat, originalType: 'income' })).sort((a, b) => a.name.localeCompare(b.name));
            fetched.expense = (fetched.expense || []).map(cat => ({ ...cat, originalType: 'expense' })).sort((a, b) => a.name.localeCompare(b.name));
            setCategories(fetched);
        } catch (err) {
            setError(err.response?.data?.message || "Не удалось загрузить категории.");
        }
        setIsLoading(false);
    }, []);

    useEffect(() => {
        loadCategories();
    }, [loadCategories]);

    const handleOpenModal = (catToEdit = null) => {
        setCategoryToEdit(catToEdit); // catToEdit уже будет содержать originalType из loadCategories
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setCategoryToEdit(null);
    };

    const handleFormSubmit = async (categoryData, editingId, originalApiType) => {
        // categoryData.type - это тип, выбранный в модалке (income/expense)
        // originalApiType - это тип, по которому нужно обращаться к API при редактировании (если тип нельзя менять)
        try {
            if (editingId) {
                // Используем originalApiType для URL, но данные берем из categoryData (включая categoryData.type)
                // Бэкенд должен сам решить, как обновить, если тип не совпадает (или вернуть ошибку, если смена типа не разрешена)
                // Наш текущий бэкенд не поддерживает смену типа income/expense, он обновит поля для категории по старому типу.
                await updateCategory(originalApiType, editingId, categoryData);
            } else {
                // При создании используем categoryData.type
                await addCategory(categoryData);
            }
            await loadCategories(); // Повторно загружаем категории, чтобы получить актуальные данные с бэкенда
            handleCloseModal();
        } catch (err) {
            console.error("Failed to save category:", err.response || err);
            // Эту ошибку лучше отображать в модальном окне
            if (isModalOpen && categoryToEdit?.id === editingId) { // Если модалка еще открыта для этой категории
                // Передаем ошибку в модальное окно, если бы у него был проп для этого
                // CategoryModal.setError(err.response?.data?.message || err.message);
                alert(`Ошибка сохранения категории: ${err.response?.data?.message || err.message}`); // Пока так
            } else {
                alert(`Ошибка сохранения категории: ${err.response?.data?.message || err.message}`);
            }
        }
    };

    const handleDeleteCategory = async (catToDelete) => {
        if (window.confirm(`Вы уверены, что хотите удалить категорию "${catToDelete.name}"?`)) {
            try {
                // Используем originalType для правильного API эндпоинта
                await deleteCategoryAPI(catToDelete.originalType, catToDelete.id);
                await loadCategories();
            } catch (err) {
                alert(`Ошибка удаления категории: ${err.response?.data?.message || err.message}`);
            }
        }
    };

    const CategoryListItem = ({ category }) => (
        <div className="flex items-center justify-between p-3 bg-gray-700 rounded-md shadow">
            <div className="flex items-center space-x-3">
                <div className={`p-2 rounded-full ${category.color || defaultNewCategoryColor}`}>
                    <CategoryIcon iconName={category.icon || defaultCategoryIconName} className="w-5 h-5 text-white" />
                </div>
                <div>
                    <p className="font-medium text-white">{category.name}</p>
                    <p className="text-xs text-gray-400">
                        {category.originalType === 'income' ? "Только доход" : "Только расход"}
                    </p>
                </div>
            </div>
            <div className="space-x-2">
                <Button onClick={() => handleOpenModal(category)} className="bg-gray-600 hover:bg-gray-500 text-xs px-3 py-1">
                    <PencilIcon className="w-3 h-3 inline mr-1"/> Редактировать
                </Button>
                <Button onClick={() => handleDeleteCategory(category)} className="bg-red-700 hover:bg-red-600 text-xs px-3 py-1">
                    <TrashIcon className="w-3 h-3 inline mr-1"/> Удалить
                </Button>
            </div>
        </div>
    );

    if (isLoading) return <div className="p-6 text-center text-gray-400">Загрузка категорий...</div>;
    if (error && !categories.income.length && !categories.expense.length) {
        return (
            <div className="p-6 text-center text-red-400 bg-red-900/30 rounded-md">
                <ExclamationTriangleIcon className="h-8 w-8 mx-auto mb-2"/>
                {error}
            </div>
        );
    }

    // Объединяем категории income и expense в один массив для отображения
    const allUserCategories = [
        ...(categories.income || []),
        ...(categories.expense || [])
    ].sort((a,b) => a.name.localeCompare(b.name)); // Сортируем общий список по имени

    return (
        <div className="p-4 sm:p-6 md:p-8 bg-slate-800 min-h-screen text-gray-200">
            <div className="max-w-3xl mx-auto">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-2xl font-semibold">Управление категориями</h1>
                    <Button onClick={() => handleOpenModal()} className="bg-amber-500 hover:bg-amber-600 text-white">
                        Добавить категорию
                    </Button>
                </div>

                {allUserCategories.length > 0 ? (
                    <div className="space-y-3">
                        {allUserCategories.map(cat => (
                            <CategoryListItem key={cat.id} category={cat} />
                        ))}
                    </div>
                ) : (
                    !isLoading && (
                        <div className="text-center py-10 px-6 bg-gray-700 rounded-lg shadow">
                            <InformationCircleIcon className="h-12 w-12 text-gray-500 mx-auto mb-3" />
                            <h3 className="text-lg font-medium text-gray-300">Категорий пока нет</h3>
                            <p className="text-sm text-gray-400 mt-1">
                                Добавьте свою первую категорию, чтобы начать.
                            </p>
                        </div>
                    )
                )}
            </div>

            <CategoryModal
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSubmit={handleFormSubmit}
                categoryToEdit={categoryToEdit}
                currentCategories={categories}
            />
        </div>
    );
};

export default SettingsPage;

###############################################################################
# FILE: src\pages\StatsPage.jsx
###############################################################################

// src/pages/StatsPage.jsx
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
    PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer,
    BarChart, Bar, XAxis, YAxis, CartesianGrid, LineChart, Line
} from 'recharts';
import { fetchTransactions, fetchCategories } from '../api/index.js';
import { ExclamationTriangleIcon, CalendarDaysIcon, InformationCircleIcon } from '@heroicons/react/24/outline';
import { CategoryIcon, defaultCategoryIconName } from '../components/ui/CategoryIcons.jsx'; // Импортируем для иконок

const defaultCategoryStatsColorHex = '#94a3b8'; // slate-500 hex for charts

const formatCurrencyForStat = (amount, currency = 'RUB') => {
    return new Intl.NumberFormat('ru-RU', { style: 'currency', currency: currency, minimumFractionDigits: 0, maximumFractionDigits:0 }).format(amount);
};

const tailwindToHex = (tailwindColor) => {
    // Этот маппинг должен быть актуальным. Если цвета изменятся в tailwind.config.js, его нужно обновить.
    // Или использовать более динамический способ получения HEX, если это возможно.
    const map = {
        'bg-slate-500': '#64748b', 'bg-gray-500': '#6b7280',
        'bg-red-400': '#f87171', 'bg-red-500': '#ef4444', 'bg-red-600': '#dc2626',
        'bg-orange-400': '#fb923c', 'bg-orange-500': '#f97316', 'bg-orange-600': '#ea580c',
        'bg-amber-400': '#fbbf24', 'bg-amber-500': '#f59e0b',
        'bg-yellow-400': '#facc15', 'bg-yellow-500': '#eab308',
        'bg-lime-400': '#a3e635', 'bg-lime-500': '#84cc16',
        'bg-green-400': '#4ade80', 'bg-green-500': '#22c55e', 'bg-green-600': '#16a34a',
        'bg-emerald-400': '#34d399', 'bg-emerald-500': '#10b981',
        'bg-teal-400': '#2dd4bf', 'bg-teal-500': '#14b8a6',
        'bg-cyan-400': '#22d3ee', 'bg-cyan-500': '#06b6d4',
        'bg-sky-400': '#38bdf8', 'bg-sky-500': '#0ea5e9',
        'bg-blue-400': '#60a5fa', 'bg-blue-500': '#3b82f6', 'bg-blue-600': '#2563eb',
        'bg-indigo-400': '#818cf8', 'bg-indigo-500': '#6366f1',
        'bg-violet-400': '#a78bfa', 'bg-violet-500': '#8b5cf6',
        'bg-purple-400': '#c084fc', 'bg-purple-500': '#a855f7', 'bg-purple-600': '#9333ea',
        'bg-fuchsia-400': '#e879f9', 'bg-fuchsia-500': '#d946ef',
        'bg-pink-400': '#f472b6', 'bg-pink-500': '#ec4899',
        'bg-rose-400': '#fb7185', 'bg-rose-500': '#f43f5e',
        'bg-primary': '#037DD6', // Пример, должен соответствовать вашей теме
        'bg-primary-dark': '#2F72FA'
    };
    return map[tailwindColor] || defaultCategoryStatsColorHex; // Fallback HEX
};


const CustomTooltipContent = ({ active, payload, label, type }) => {
    if (active && payload && payload.length) {
        if (type === "pie" && payload[0].payload) {
            const data = payload[0].payload;
            return (
                <div className="bg-surface dark:bg-slate-800/90 backdrop-blur-sm p-2.5 rounded-md shadow-lg border border-slate-300 dark:border-slate-700 text-xs">
                    <div className="flex items-center">
                        {data.icon ? ( // Отображаем иконку, если есть
                            <div className={`p-0.5 mr-1.5 rounded-sm ${data.color || 'bg-slate-400'}`}>
                                <CategoryIcon iconName={data.icon} className="w-3 h-3 text-white" />
                            </div>
                        ) : (
                            data.color && <span className={`w-2.5 h-2.5 rounded-sm mr-1.5 ${data.color}`}></span>
                        )}
                        <p className="text-text dark:text-text-dark">
                            {data.name}: <span className="font-semibold">{formatCurrencyForStat(data.value)}</span>
                        </p>
                    </div>
                    {payload[0].percent && (
                        <p className="text-text-muted dark:text-text-dark_muted ml-4">({(payload[0].percent * 100).toFixed(1)}%)</p>
                    )}
                </div>
            );
        }
        if ((type === "bar" || type === "line") && label) {
            return (
                <div className="bg-surface dark:bg-slate-800/90 backdrop-blur-sm p-2.5 rounded-md shadow-lg border border-slate-300 dark:border-slate-700 text-xs">
                    <p className="font-semibold text-text dark:text-text-dark mb-1">{label}</p>
                    {payload.map((item, index) => (
                        <div key={`tooltip-item-${index}`} className="flex items-center">
                            <span style={{ backgroundColor: item.color, width: '8px', height: '8px', borderRadius: '2px', marginRight: '6px' }}></span>
                            <p className="text-text dark:text-text-dark">
                                {item.name}: <span className="font-semibold">{formatCurrencyForStat(item.value)}</span>
                            </p>
                        </div>
                    ))}
                </div>
            );
        }
    }
    return null;
};

const renderCustomPieLegend = (props) => {
    const { payload } = props;
    return (
        <ul className="flex flex-wrap justify-center gap-x-3 gap-y-1.5 text-xs mt-4 max-w-md mx-auto">
            {payload.map((entry, index) => {
                const categoryTailwindColor = entry.payload?.color || 'bg-slate-400';
                const categoryIconName = entry.payload?.icon || defaultCategoryIconName;
                return (
                    <li key={`legend-item-${index}`} className="flex items-center">
                        <div className={`p-0.5 rounded-sm mr-1.5 ${categoryTailwindColor}`}>
                            <CategoryIcon iconName={categoryIconName} className="w-2.5 h-2.5 text-white" />
                        </div>
                        <span className="text-text-muted dark:text-text-dark_muted">{entry.value}</span>
                    </li>
                );
            })}
        </ul>
    );
};


const StatsPage = () => {
    const [transactions, setTransactions] = useState([]);
    const [allCategories, setAllCategories] = useState({ income: [], expense: [] });
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [filterPeriod, setFilterPeriod] = useState('month');
    const [customStartDate, setCustomStartDate] = useState('');
    const [customEndDate, setCustomEndDate] = useState('');

    const loadData = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            const [transRes, catRes] = await Promise.all([
                fetchTransactions(),
                fetchCategories()
            ]);
            setTransactions(transRes.data || []);
            setAllCategories(catRes.data || { income: [], expense: [] });
        } catch (err) {
            console.error("Failed to load data for stats:", err);
            setError(err.response?.data?.message || "Не удалось загрузить данные для статистики.");
        }
        setIsLoading(false);
    }, []);

    useEffect(() => {
        loadData();
    }, [loadData]);

    const getPeriodDateRange = useCallback(() => {
        const now = new Date();
        let startDate = new Date(now);
        let endDate = new Date(now);

        startDate.setHours(0, 0, 0, 0);
        endDate.setHours(23, 59, 59, 999);

        if (filterPeriod === 'custom') {
            if (customStartDate) {
                startDate = new Date(customStartDate);
                startDate.setHours(0, 0, 0, 0);
            } else {
                startDate = new Date(now.getFullYear(), 0, 1); // Начало текущего года
            }
            if (customEndDate) {
                endDate = new Date(customEndDate);
                endDate.setHours(23, 59, 59, 999);
            }
            // Если endDate не указан, он остается концом текущего дня (уже установлено)
            if (startDate > endDate && customStartDate && customEndDate) {
                [startDate, endDate] = [endDate, startDate];
            }
        } else {
            switch (filterPeriod) {
                case 'week':
                    const dayOfWeek = now.getDay(); // 0 (Sun) - 6 (Sat)
                    const diffToMonday = now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
                    startDate = new Date(now.getFullYear(), now.getMonth(), diffToMonday);
                    startDate.setHours(0,0,0,0);
                    endDate = new Date(startDate);
                    endDate.setDate(startDate.getDate() + 6); // Конец недели (воскресенье)
                    endDate.setHours(23,59,59,999);
                    break;
                case 'month':
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                    startDate.setHours(0,0,0,0);
                    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0); // Последний день текущего месяца
                    endDate.setHours(23,59,59,999);
                    break;
                case 'year':
                    startDate = new Date(now.getFullYear(), 0, 1);
                    startDate.setHours(0,0,0,0);
                    endDate = new Date(now.getFullYear(), 11, 31); // 31 декабря
                    endDate.setHours(23,59,59,999);
                    break;
                default: // Should not happen, but as a fallback
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
                    break;
            }
        }
        return { startDate, endDate };
    }, [filterPeriod, customStartDate, customEndDate]);


    const filteredTransactions = useMemo(() => {
        if (!transactions.length) return [];
        const { startDate, endDate } = getPeriodDateRange();
        return transactions.filter(t => {
            const transactionDate = new Date(t.date);
            return transactionDate >= startDate && transactionDate <= endDate;
        });
    }, [transactions, getPeriodDateRange]);

    const statsData = useMemo(() => {
        if (!filteredTransactions.length && !allCategories.income.length && !allCategories.expense.length) {
            return { totalIncome: 0, totalExpense: 0, netResult: 0, expenseByCategory: [], incomeExpenseOverTime: [], balanceOverTime: [] };
        }

        let totalIncome = 0;
        let totalExpense = 0;
        const expenseByCategoryMap = new Map();
        const dailyDataMap = new Map();
        const { startDate, endDate } = getPeriodDateRange();

        const categoryMap = {};
        (allCategories.income || []).forEach(cat => categoryMap[cat.id] = cat);
        (allCategories.expense || []).forEach(cat => categoryMap[cat.id] = cat);

        filteredTransactions.forEach(t => {
            const category = categoryMap[t.categoryId];
            const categoryName = category?.name || 'Без категории';
            const categoryColor = category?.color || 'bg-slate-400';
            const categoryIcon = category?.icon || defaultCategoryIconName;
            const amount = parseFloat(t.amount);
            const dateKey = new Date(t.date).toISOString().split('T')[0];

            if (!dailyDataMap.has(dateKey)) {
                dailyDataMap.set(dateKey, { income: 0, expense: 0, balanceChange: 0 });
            }
            const dayData = dailyDataMap.get(dateKey);

            if (t.type === 'income') {
                totalIncome += amount;
                dayData.income += amount;
                dayData.balanceChange += amount;
            } else {
                totalExpense += amount;
                dayData.expense += amount;
                dayData.balanceChange -= amount;
                const currentCategoryData = expenseByCategoryMap.get(categoryName);
                expenseByCategoryMap.set(categoryName, {
                    value: (currentCategoryData?.value || 0) + amount,
                    color: categoryColor,
                    icon: categoryIcon, // Сохраняем иконку для легенды
                });
            }
        });

        const expenseByCategory = Array.from(expenseByCategoryMap)
            .map(([name, data]) => ({ name, value: data.value, color: data.color, icon: data.icon }))
            .sort((a, b) => b.value - a.value);

        const incomeExpenseOverTime = [];
        const balanceOverTimeData = [];
        let runningBalance = 0;

        const timeKeys = [];
        if (startDate && endDate && startDate <= endDate) {
            let currentDateIter = new Date(startDate);
            currentDateIter.setHours(0,0,0,0);
            const endOfDayOfEndDate = new Date(endDate);
            endOfDayOfEndDate.setHours(23,59,59,999);

            while(currentDateIter <= endOfDayOfEndDate) {
                timeKeys.push(currentDateIter.toISOString().split('T')[0]);
                currentDateIter.setDate(currentDateIter.getDate() + 1);
            }
        }

        timeKeys.sort();

        timeKeys.forEach(key => {
            const dayData = dailyDataMap.get(key) || { income: 0, expense: 0, balanceChange: 0 };
            incomeExpenseOverTime.push({
                name: new Date(key).toLocaleDateString('ru-RU', { day:'2-digit', month:'short' }),
                income: dayData.income,
                expense: dayData.expense,
            });
            runningBalance += dayData.balanceChange;
            balanceOverTimeData.push({
                name: new Date(key).toLocaleDateString('ru-RU', { day:'2-digit', month:'short' }),
                balance: runningBalance
            });
        });

        return {
            totalIncome,
            totalExpense,
            netResult: totalIncome - totalExpense,
            expenseByCategory,
            incomeExpenseOverTime,
            balanceOverTime: balanceOverTimeData,
        };
    }, [filteredTransactions, allCategories, getPeriodDateRange]);

    if (isLoading && !transactions.length) {
        return <div className="flex justify-center items-center h-64"><p className="text-lg text-text-muted dark:text-text-dark_muted">Загрузка статистики...</p></div>;
    }

    if (error) {
        return (
            <div className="text-center py-10 px-6 bg-error/10 dark:bg-error-dark/20 rounded-lg shadow border border-error/30 dark:border-error-dark/50">
                <ExclamationTriangleIcon className="h-12 w-12 text-error dark:text-error-dark mx-auto mb-3" />
                <h3 className="text-lg font-medium text-error dark:text-error-dark">{error}</h3>
            </div>
        );
    }

    const noDataForPeriod = filteredTransactions.length === 0 && !isLoading;

    return (
        <div className="space-y-6 md:space-y-8">
            <h1 className="text-2xl sm:text-3xl font-semibold text-text dark:text-text-dark">Финансовый анализ</h1>

            <section className="p-4 sm:p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                <h2 className="text-lg font-medium mb-3 text-text dark:text-text-dark">Выберите период</h2>
                <div className="flex flex-wrap gap-2 mb-4">
                    {[{val: 'week', label: 'Эта неделя'}, {val: 'month', label: 'Этот месяц'}, {val: 'year', label: 'Этот год'}].map(p => (
                        <button
                            key={p.val}
                            onClick={() => { setFilterPeriod(p.val); setCustomStartDate(''); setCustomEndDate(''); }}
                            className={`px-3 py-1.5 sm:px-4 sm:py-2 text-xs sm:text-sm font-medium rounded-md transition-colors
                                ${filterPeriod === p.val && !customStartDate && !customEndDate
                                ? 'bg-primary dark:bg-primary-dark text-white shadow-md'
                                : 'bg-slate-200 dark:bg-slate-700 text-text dark:text-text-dark hover:bg-slate-300 dark:hover:bg-slate-600'
                            }`}
                        >
                            {p.label}
                        </button>
                    ))}
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
                    <div>
                        <label htmlFor="customStartDate" className="block text-xs font-medium text-text-muted dark:text-text-dark_muted mb-1">Начало периода</label>
                        <input type="date" id="customStartDate" value={customStartDate}
                               onChange={e => { setCustomStartDate(e.target.value); if(e.target.value) setFilterPeriod('custom');}}
                               className="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-dark focus:ring-primary dark:focus:ring-primary-dark focus:border-primary dark:focus:border-primary-dark text-sm h-10"
                        />
                    </div>
                    <div>
                        <label htmlFor="customEndDate" className="block text-xs font-medium text-text-muted dark:text-text-dark_muted mb-1">Конец периода</label>
                        <input type="date" id="customEndDate" value={customEndDate}
                               onChange={e => { setCustomEndDate(e.target.value); if(e.target.value) setFilterPeriod('custom');}}
                               className="w-full p-2 border border-slate-300 dark:border-slate-600 rounded-md bg-surface dark:bg-surface-dark text-text dark:text-text-dark focus:ring-primary dark:focus:ring-primary-dark focus:border-primary dark:focus:border-primary-dark text-sm h-10"
                               min={customStartDate || undefined}
                        />
                    </div>
                </div>
                {(filterPeriod === 'custom' && (!customStartDate || !customEndDate)) && (
                    <p className="text-xs text-amber-600 dark:text-amber-500 mt-2">
                        Для пользовательского периода укажите начальную и конечную даты.
                    </p>
                )}
            </section>

            <section className="grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-6">
                <div className="p-5 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                    <h3 className="text-sm font-medium text-text-muted dark:text-text-dark_muted">Общий доход</h3>
                    <p className="text-2xl sm:text-3xl font-bold text-success dark:text-success-dark mt-1">{formatCurrencyForStat(statsData.totalIncome)}</p>
                </div>
                <div className="p-5 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                    <h3 className="text-sm font-medium text-text-muted dark:text-text-dark_muted">Общий расход</h3>
                    <p className="text-2xl sm:text-3xl font-bold text-error dark:text-error-dark mt-1">{formatCurrencyForStat(statsData.totalExpense)}</p>
                </div>
                <div className="p-5 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                    <h3 className="text-sm font-medium text-text-muted dark:text-text-dark_muted">Чистый результат</h3>
                    <p className={`text-2xl sm:text-3xl font-bold mt-1 ${statsData.netResult >= 0 ? 'text-success dark:text-success-dark' : 'text-error dark:text-error-dark'}`}>
                        {formatCurrencyForStat(statsData.netResult)}
                    </p>
                </div>
            </section>

            {noDataForPeriod ? (
                <div className="p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg text-center">
                    <InformationCircleIcon className="h-12 w-12 text-text-muted dark:text-text-dark_muted mx-auto mb-3" />
                    <p className="text-lg font-medium text-text dark:text-text-dark">Нет данных для отображения</p>
                    <p className="text-sm text-text-muted dark:text-text-dark_muted">Попробуйте выбрать другой период или добавить транзакции.</p>
                </div>
            ) : (
                <>
                    <section className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {statsData.expenseByCategory.length > 0 ? (
                            <div className="p-4 sm:p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                                <h3 className="text-lg font-semibold mb-4 text-text dark:text-text-dark text-center">Структура расходов</h3>
                                <ResponsiveContainer width="100%" height={300}>
                                    <PieChart>
                                        <Pie data={statsData.expenseByCategory} cx="50%" cy="50%" labelLine={false} outerRadius={100} dataKey="value" nameKey="name">
                                            {statsData.expenseByCategory.map((entry, index) => (
                                                <Cell key={`cell-expense-${index}`} fill={tailwindToHex(entry.color)} />
                                            ))}
                                        </Pie>
                                        <Tooltip content={<CustomTooltipContent type="pie" />} />
                                        <Legend content={<renderCustomPieLegend />} />
                                    </PieChart>
                                </ResponsiveContainer>
                            </div>
                        ) : <div className="lg:col-span-1 p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg text-center text-text-muted dark:text-text-dark_muted flex flex-col justify-center items-center min-h-[200px]"><CalendarDaysIcon className="h-10 w-10 mb-2"/>Нет данных по расходам за период.</div>}

                        {statsData.incomeExpenseOverTime.length > 0 ? (
                            <div className="p-4 sm:p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                                <h3 className="text-lg font-semibold mb-4 text-text dark:text-text-dark text-center">Доходы и расходы</h3>
                                <ResponsiveContainer width="100%" height={300}>
                                    <BarChart data={statsData.incomeExpenseOverTime} margin={{ top: 5, right: 5, left: -25, bottom: 5 }}>
                                        <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="rgba(128,128,128,0.1)" />
                                        <XAxis dataKey="name" tick={{ fontSize: 10, fill: 'currentColor' }} className="text-text-muted dark:text-text-dark_muted" />
                                        <YAxis tickFormatter={(value) => `${Math.round(value / 1000)}k`} tick={{ fontSize: 10, fill: 'currentColor' }} className="text-text-muted dark:text-text-dark_muted" />
                                        <Tooltip content={<CustomTooltipContent type="bar"/>} />
                                        <Legend wrapperStyle={{ fontSize: '0.75rem', paddingTop: '10px' }}/>
                                        <Bar dataKey="income" fill={tailwindToHex('bg-green-500')} name="Доходы" radius={[3, 3, 0, 0]} barSize={12} />
                                        <Bar dataKey="expense" fill={tailwindToHex('bg-red-500')} name="Расходы" radius={[3, 3, 0, 0]} barSize={12} />
                                    </BarChart>
                                </ResponsiveContainer>
                            </div>
                        ) : <div className="lg:col-span-1 p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg text-center text-text-muted dark:text-text-dark_muted flex flex-col justify-center items-center min-h-[200px]"><CalendarDaysIcon className="h-10 w-10 mb-2"/>Нет данных по дням за период.</div>}
                    </section>
                    {statsData.balanceOverTime.length > 1 && (
                        <section className="p-4 sm:p-6 bg-surface dark:bg-surface-dark rounded-xl shadow-lg">
                            <h3 className="text-lg font-semibold mb-4 text-text dark:text-text-dark text-center">Изменение баланса за период</h3>
                            <ResponsiveContainer width="100%" height={300}>
                                <LineChart data={statsData.balanceOverTime} margin={{ top: 5, right: 20, left: -15, bottom: 5 }}>
                                    <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="rgba(128,128,128,0.1)" />
                                    <XAxis dataKey="name" tick={{ fontSize: 10, fill: 'currentColor' }} className="text-text-muted dark:text-text-dark_muted" />
                                    <YAxis tickFormatter={(value) => `${Math.round(value / 1000)}k`} tick={{ fontSize: 10, fill: 'currentColor' }} className="text-text-muted dark:text-text-dark_muted" />
                                    <Tooltip content={<CustomTooltipContent type="line"/>} />
                                    <Legend wrapperStyle={{ fontSize: '0.75rem', paddingTop: '10px' }} />
                                    <Line type="monotone" dataKey="balance" name="Баланс" stroke={tailwindToHex('bg-primary')} strokeWidth={2} dot={{ r: 3, fill: tailwindToHex('bg-primary') }} activeDot={{ r: 5, stroke: tailwindToHex('bg-primary-dark'), fill: tailwindToHex('bg-primary') }} />
                                </LineChart>
                            </ResponsiveContainer>
                        </section>
                    )}
                </>
            )}
        </div>
    );
};

export default StatsPage;

###############################################################################
# FILE: src\routes\AppRouter.jsx
###############################################################################

// src/routes/AppRouter.jsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import LoginPage from '../pages/Auth/LoginPage.jsx';
import RegisterPage from '../pages/Auth/RegisterPage.jsx';
import DashboardPage from '../pages/DashboardPage.jsx';
import StatsPage from '../pages/StatsPage.jsx';
import SettingsPage from '../pages/SettingsPage.jsx';
import ProtectedRoute from './ProtectedRoute.jsx';
import { useAuth } from '../context/AuthContext.jsx';

const AppRouter = () => {
    const { isAuthenticated, isLoadingAuth } = useAuth();

    if (isLoadingAuth && !localStorage.getItem('authToken')) { // Показываем лоадер только при первой загрузке, если нет токена
        return (
            <div className="flex justify-center items-center h-screen bg-background-dark">
                <p className="text-xl text-text-dark">Загрузка приложения...</p>
            </div>
        );
    }
    // Если isLoadingAuth все еще true, но токен есть, ProtectedRoute сам покажет лоадер авторизации

    return (
        <Routes>
            <Route
                path="/login"
                element={!isAuthenticated ? <LoginPage /> : <Navigate to="/dashboard" replace />}
            />
            <Route
                path="/register"
                element={!isAuthenticated ? <RegisterPage /> : <Navigate to="/dashboard" replace />}
            />

            {/* Защищенные маршруты */}
            <Route element={<ProtectedRoute />}>
                <Route path="/" element={<Navigate to="/dashboard" replace />} /> {/* Главная по умолчанию */}
                <Route path="dashboard" element={<DashboardPage />} />
                <Route path="stats" element={<StatsPage />} />
                <Route path="settings" element={<SettingsPage />} />
            </Route>

            {/* Если пользователь авторизован и вводит несуществующий путь, редирект на дашборд.
           Если не авторизован - на логин. */}
            <Route
                path="*"
                element={<Navigate to={isAuthenticated ? "/dashboard" : "/login"} replace />}
            />
        </Routes>
    );
};

export default AppRouter;

###############################################################################
# FILE: src\routes\ProtectedRoute.jsx
###############################################################################

// src/routes/ProtectedRoute.jsx
import React from 'react';
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';
import AppLayout from '../components/layout/AppLayout.jsx';

const ProtectedRoute = () => {
    const { isAuthenticated, isLoadingAuth } = useAuth();
    const location = useLocation();

    if (isLoadingAuth) {
        return (
            <div className="flex justify-center items-center h-screen bg-background-dark">
                <p className="text-xl text-text-dark">Проверка авторизации...</p>
                {/* Здесь можно добавить красивый спиннер/лоадер */}
            </div>
        );
    }

    if (!isAuthenticated) {
        // Передаем текущий путь для редиректа обратно после логина
        return <Navigate to="/login" state={{ from: location }} replace />;
    }

    return (
        <AppLayout>
            <Outlet /> {/* Outlet рендерит дочерние маршруты, определенные в AppRouter */}
        </AppLayout>
    );
};

export default ProtectedRoute;

###############################################################################
# FILE: src\components\layout\AppLayout.jsx
###############################################################################

// src/components/layout/AppLayout.jsx
import React from 'react';
import Sidebar from './Sidebar.jsx';

const AppLayout = ({ children }) => { // Принимает children
    return (
        <div className="flex h-screen bg-background dark:bg-background-dark text-text dark:text-text-dark">
            <Sidebar />
            <div className="flex-1 flex flex-col ml-64 overflow-x-hidden"> {/* ml-64 to offset fixed sidebar, overflow-x-hidden */}
                <main className="flex-1 p-4 sm:p-6 overflow-y-auto"> {/* Добавлены sm:p-6 для больших экранов */}
                    {children} {/* Отображаем то, что передано как children (это будет <Outlet /> из ProtectedRoute) */}
                </main>
            </div>
        </div>
    );
};

export default AppLayout;

###############################################################################
# FILE: src\components\layout\Sidebar.jsx
###############################################################################

// src/components/layout/Sidebar.jsx
import React, { useState, useEffect } from 'react';
import { NavLink } from 'react-router-dom';
import {
    ChartBarIcon,
    Cog6ToothIcon,
    HomeIcon,
    // CurrencyDollarIcon, // Заменено на img
    ArrowLeftOnRectangleIcon,
    MoonIcon, SunIcon
} from '@heroicons/react/24/outline';
import { useAuth } from '../../context/AuthContext.jsx';

const navigationLinks = [
    { name: 'Дашборд', href: '/dashboard', icon: HomeIcon },
    { name: 'Статистика', href: '/stats', icon: ChartBarIcon },
    { name: 'Категории', href: '/settings', icon: Cog6ToothIcon },
];

const Sidebar = () => {
    const { user, logout } = useAuth();
    const [darkMode, setDarkMode] = useState(() => {
        const theme = localStorage.getItem('theme');
        if (theme) return theme === 'dark';
        return window.matchMedia('(prefers-color-scheme: dark)').matches;
    });

    useEffect(() => {
        if (darkMode) {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        }
    }, [darkMode]);

    const toggleDarkMode = () => setDarkMode(!darkMode);

    return (
        <div className="w-64 bg-surface dark:bg-surface-dark text-text dark:text-text-dark_muted flex flex-col fixed h-full shadow-lg border-r border-slate-200 dark:border-slate-700 z-30">
            {/* Logo */}
            <div className="h-20 flex items-center justify-center px-4 border-b border-slate-200 dark:border-slate-700">
                <img src="/free-icon-coin-4153647.png" alt="CoinKeeper Logo" className="h-8 w-8 mr-2" />
                <span className="text-2xl font-semibold text-text dark:text-text-dark">CoinKeeper</span>
            </div>

            {/* Navigation */}
            <nav className="flex-1 px-3 py-4 space-y-1.5 overflow-y-auto">
                {navigationLinks.map((item) => (
                    <NavLink
                        key={item.name}
                        to={item.href}
                        className={({ isActive }) =>
                            `group flex items-center px-3 py-2.5 text-sm font-medium rounded-md transition-colors
                         ${isActive
                                ? 'sidebar-link-active'
                                : 'text-text-muted dark:text-text-dark_muted hover:bg-slate-100 dark:hover:bg-slate-700 hover:text-text dark:hover:text-text-dark'
                            }`
                        }
                    >
                        <item.icon className="mr-3 h-5 w-5 flex-shrink-0" aria-hidden="true" />
                        {item.name}
                    </NavLink>
                ))}
            </nav>

            {/* Theme Toggle and User Info */}
            <div className="px-3 py-3 border-t border-slate-200 dark:border-slate-700 space-y-3">
                <button
                    onClick={toggleDarkMode}
                    className="w-full flex items-center justify-start px-3 py-2 text-sm font-medium rounded-md text-text-muted dark:text-text-dark_muted hover:bg-slate-100 dark:hover:bg-slate-700 hover:text-text dark:hover:text-text-dark transition-colors"
                    title={darkMode ? 'Переключить на светлую тему' : 'Переключить на темную тему'}
                >
                    {darkMode ? <SunIcon className="h-5 w-5 mr-3"/> : <MoonIcon className="h-5 w-5 mr-3"/>}
                    <span>{darkMode ? 'Светлая тема' : 'Темная тема'}</span>
                </button>

                {user && (
                    <div className="pt-3 border-t border-slate-200 dark:border-slate-700">
                        <p className="text-xs text-text-muted dark:text-slate-500 px-3 mb-1">Вошли как:</p>
                        <div className="px-3 mb-2">
                            <p className="text-sm font-medium text-text dark:text-text-dark truncate" title={user.email}>
                                {user.email}
                            </p>
                        </div>
                        <button
                            onClick={logout}
                            className="w-full flex items-center justify-start px-3 py-2.5 text-sm font-medium rounded-md text-text-muted dark:text-text-dark_muted bg-slate-100 dark:bg-slate-700 hover:bg-red-100 dark:hover:bg-error/30 hover:text-error dark:hover:text-error-dark transition-colors"
                        >
                            <ArrowLeftOnRectangleIcon className="mr-3 h-5 w-5" />
                            Выйти
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Sidebar;

###############################################################################
# FILE: src\components\transactions\TransactionModal.jsx
###############################################################################

// src/components/transactions/TransactionModal.jsx
import React, { useState, useEffect, useCallback } from 'react';
import Button from '../ui/Button.jsx';
import Input from '../ui/Input.jsx';
import { fetchCategories, addCategory as apiAddCategory } from '../../api/index.js'; // addCategory все еще может быть полезно
import {
    XMarkIcon, CurrencyDollarIcon, CalendarDaysIcon,
    TrashIcon, PlusIcon, TagIcon
} from '@heroicons/react/24/outline';
import { CategoryIcon, defaultCategoryIconName } from '../ui/CategoryIcons.jsx'; // Импортируем для отображения

const defaultNewQuickCategoryColor = 'bg-slate-500'; // Цвет для быстро добавленной категории

const TransactionModal = ({ isOpen, onClose, onSubmit, transactionToEdit, onDelete }) => {
    const [type, setType] = useState('expense');
    const [amount, setAmount] = useState('');
    const [categoryId, setCategoryIdState] = useState('');
    const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
    const [comment, setComment] = useState('');
    const [errors, setErrors] = useState({});
    const [allCategories, setAllCategories] = useState({ income: [], expense: [] });
    const [isLoadingCategories, setIsLoadingCategories] = useState(false);

    const [showNewCategoryInput, setShowNewCategoryInput] = useState(false); // Для "быстрого" добавления
    const [newCategoryName, setNewCategoryName] = useState(''); // Для "быстрого" добавления

    const isEditing = !!transactionToEdit;

    const loadCategories = useCallback(async () => {
        setIsLoadingCategories(true);
        try {
            const response = await fetchCategories(); // API теперь возвращает `icon` и `color`
            setAllCategories(response.data || { income: [], expense: [] });
            setErrors(prev => ({ ...prev, categories: null }));
        } catch (error) {
            console.error("Failed to fetch categories:", error);
            setErrors(prev => ({ ...prev, categories: "Не удалось загрузить категории." }));
        }
        setIsLoadingCategories(false);
    }, []);

    useEffect(() => {
        if (isOpen) {
            loadCategories();
            if (isEditing && transactionToEdit) {
                setType(transactionToEdit.type || 'expense');
                setAmount(transactionToEdit.amount?.toString() || '');
                setCategoryIdState(transactionToEdit.categoryId || '');
                setDate(transactionToEdit.date ? new Date(transactionToEdit.date).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]);
                setComment(transactionToEdit.comment || '');
            } else {
                setType('expense');
                setAmount('');
                setCategoryIdState('');
                setDate(new Date().toISOString().split('T')[0]);
                setComment('');
            }
            setErrors({});
            setShowNewCategoryInput(false); // Сбрасываем при открытии
            setNewCategoryName(''); // Сбрасываем при открытии
        }
    }, [isOpen, transactionToEdit, isEditing, loadCategories]);

    useEffect(() => {
        if (isOpen) {
            setCategoryIdState('');
            setShowNewCategoryInput(false);
            setNewCategoryName('');
        }
    }, [type, isOpen]);

    const availableCategories = allCategories[type] || [];
    const selectedCategoryDetails = categoryId ? availableCategories.find(c => c.id === categoryId) : null;

    const validateForm = () => {
        const newErrors = {};
        if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
            newErrors.amount = 'Введите корректную сумму (больше 0).';
        }
        if (!showNewCategoryInput && !categoryId) {
            newErrors.category = 'Выберите категорию.';
        }
        if (showNewCategoryInput && !newCategoryName.trim()) {
            newErrors.newCategory = 'Название новой категории не может быть пустым.';
        }
        if (!date) {
            newErrors.date = 'Выберите дату.';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateForm()) {
            return;
        }

        let finalCategoryId = categoryId;

        if (showNewCategoryInput && newCategoryName.trim()) {
            // "Быстрое" добавление категории
            try {
                const response = await apiAddCategory({
                    type,
                    name: newCategoryName.trim(),
                    color: defaultNewQuickCategoryColor, // Используем цвет по умолчанию
                    icon: defaultCategoryIconName     // Используем иконку по умолчанию
                });
                const newCat = response.data;
                // Обновляем список категорий в состоянии модального окна
                setAllCategories(prev => ({
                    ...prev,
                    [type]: [...(prev[type] || []), newCat].sort((a,b) => a.name.localeCompare(b.name))
                }));
                finalCategoryId = newCat.id;
                setNewCategoryName('');
                setShowNewCategoryInput(false);
                setErrors(prev => ({ ...prev, newCategory: null }));
            } catch (error) {
                console.error("Failed to quick add category:", error);
                setErrors(prev => ({ ...prev, newCategory: error.response?.data?.message || "Ошибка добавления категории." }));
                return;
            }
        }

        if (!finalCategoryId) {
            setErrors(prev => ({...prev, category: "Категория обязательна для транзакции."}));
            return;
        }

        const transactionData = {
            type,
            amount: parseFloat(amount),
            categoryId: finalCategoryId,
            date: new Date(date).toISOString(),
            comment,
        };
        onSubmit(transactionData); // Эта функция (из DashboardPage) обработает создание/обновление
    };

    const handleDeleteLocal = () => {
        if (isEditing && onDelete) {
            onDelete(transactionToEdit.id);
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto p-4">
            <div className="fixed inset-0 bg-black/60 dark:bg-black/70 backdrop-blur-sm" onClick={onClose}></div>
            <div className="relative bg-surface dark:bg-surface-dark p-6 md:p-8 rounded-xl shadow-xl w-full max-w-lg m-auto transform transition-all duration-300 ease-out scale-95 opacity-0 animate-modal-scale-in">
                <div className="flex items-center justify-between mb-6 pb-4 border-b border-slate-200 dark:border-slate-700">
                    <h2 className="text-xl font-semibold text-text dark:text-text-dark">
                        {isEditing ? 'Редактировать транзакцию' : 'Новая транзакция'}
                    </h2>
                    <button onClick={onClose} className="text-text-muted dark:text-text-dark_muted hover:text-text dark:hover:text-text-dark transition-colors" aria-label="Закрыть">
                        <XMarkIcon className="h-6 w-6" />
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-5">
                    <div>
                        <label className="block mb-2 text-sm font-medium text-text dark:text-text-dark_muted">Тип транзакции</label>
                        <div className="flex rounded-md shadow-sm">
                            <button
                                type="button"
                                onClick={() => setType('expense')}
                                className={`flex-1 py-2.5 px-4 text-sm font-medium rounded-l-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-1 dark:focus:ring-offset-surface-dark border border-r-0
                                  ${type === 'expense'
                                    ? 'bg-red-500/90 hover:bg-red-600 text-white focus:ring-red-400 border-red-500/90'
                                    : 'bg-slate-200 dark:bg-slate-700 text-text dark:text-text-dark hover:bg-slate-300 dark:hover:bg-slate-600 focus:ring-slate-400 border-slate-300 dark:border-slate-600'
                                }`}
                            >Расход</button>
                            <button
                                type="button"
                                onClick={() => setType('income')}
                                className={`flex-1 py-2.5 px-4 text-sm font-medium rounded-r-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-1 dark:focus:ring-offset-surface-dark border
                                  ${type === 'income'
                                    ? 'bg-green-500/90 hover:bg-green-600 text-white focus:ring-green-400 border-green-500/90'
                                    : 'bg-slate-200 dark:bg-slate-700 text-text dark:text-text-dark hover:bg-slate-300 dark:hover:bg-slate-600 focus:ring-slate-400 border-slate-300 dark:border-slate-600'
                                }`}
                            >Доход</button>
                        </div>
                    </div>

                    <Input
                        id="amount" label="Сумма" type="number" placeholder="0.00" value={amount}
                        onChange={(e) => setAmount(e.target.value)} error={errors.amount}
                        icon={<CurrencyDollarIcon />}
                        inputClassName="text-lg" inputMode="decimal" step="0.01"
                        wrapperClassName="mb-0"
                    />

                    <div>
                        <label htmlFor="category" className="block mb-2 text-sm font-medium text-text dark:text-text-dark_muted">Категория</label>
                        {isLoadingCategories && <p className="text-sm text-text-muted dark:text-text-dark_muted py-2">Загрузка категорий...</p>}
                        {errors.categories && !isLoadingCategories && <p className="text-xs text-error dark:text-error-dark mb-2 py-2">{errors.categories}</p>}

                        {!showNewCategoryInput && !isLoadingCategories && !errors.categories && (
                            <div className="flex items-stretch space-x-2">
                                <div className="relative flex-grow">
                                    <div className="absolute inset-y-0 left-0 flex items-center pl-2.5 pointer-events-none">
                                        {selectedCategoryDetails ? (
                                            <div className={`p-1 rounded-full ${selectedCategoryDetails.color}`}>
                                                <CategoryIcon
                                                    iconName={selectedCategoryDetails.icon || defaultCategoryIconName}
                                                    className="w-3.5 h-3.5 text-white"
                                                />
                                            </div>
                                        ) : (
                                            <TagIcon className="w-4 h-4 text-text-muted dark:text-text-dark_muted" />
                                        )}
                                    </div>
                                    <select
                                        id="category" value={categoryId} onChange={(e) => setCategoryIdState(e.target.value)}
                                        className={`block w-full p-2.5 pl-10 text-sm rounded-lg border ${errors.category ? 'border-error dark:border-error-dark focus:ring-error dark:focus:ring-error-dark' : 'border-slate-300 dark:border-slate-600 focus:ring-primary dark:focus:ring-primary-dark'} bg-surface dark:bg-surface-dark text-text dark:text-text-dark placeholder-text-muted dark:placeholder-text-dark_muted`}
                                        disabled={availableCategories.length === 0}
                                    >
                                        <option value="">
                                            {availableCategories.length === 0 ? `Нет категорий ${type === 'income' ? 'дохода' : 'расхода'}` : 'Выберите категорию'}
                                        </option>
                                        {availableCategories.map(cat => (
                                            <option key={cat.id} value={cat.id}>
                                                {cat.name}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <Button type="button" onClick={() => setShowNewCategoryInput(true)} variant="secondary" className="p-2.5 flex-shrink-0 h-full" title="Добавить новую категорию">
                                    <PlusIcon className="h-5 w-5"/>
                                </Button>
                            </div>
                        )}
                        {showNewCategoryInput && (
                            <div className="p-3 border border-dashed border-slate-400 dark:border-slate-500 rounded-md space-y-3 bg-slate-50 dark:bg-slate-700/30">
                                <Input
                                    id="newCategoryName" label="Название новой категории (быстрое добавление)" type="text" placeholder="Например, 'Такси'"
                                    value={newCategoryName} onChange={(e) => setNewCategoryName(e.target.value)}
                                    error={errors.newCategory} wrapperClassName="mb-0" labelClassName='text-xs'
                                />
                                <div className="flex space-x-2">
                                    {/* Кнопка "Сохранить" для быстрой категории теперь не нужна, т.к. сабмит формы это сделает */}
                                    <Button type="button" variant="secondary" onClick={() => {setShowNewCategoryInput(false); setNewCategoryName(''); setErrors(prev => ({...prev, newCategory: null}))}} className="text-sm py-1.5 px-3">Отмена</Button>
                                </div>
                                <p className="text-xs text-text-muted dark:text-text-dark_muted">Категория будет создана с цветом и иконкой по умолчанию. Их можно будет изменить на странице "Управление Категориями".</p>
                            </div>
                        )}
                        {errors.category && !showNewCategoryInput && <p className="mt-1 text-xs text-error dark:text-error-dark">{errors.category}</p>}
                    </div>

                    <Input
                        id="date" label="Дата" type="date" value={date}
                        onChange={(e) => setDate(e.target.value)} error={errors.date}
                        icon={<CalendarDaysIcon />}
                        wrapperClassName="mb-0"
                    />

                    <div>
                        <label htmlFor="comment" className="block mb-2 text-sm font-medium text-text dark:text-text-dark_muted">Комментарий (необязательно)</label>
                        <textarea id="comment" rows="2" placeholder="Детали транзакции..." value={comment}
                                  onChange={(e) => setComment(e.target.value)}
                                  className="block w-full p-2.5 text-sm rounded-lg border border-slate-300 dark:border-slate-600 focus:ring-primary dark:focus:ring-primary-dark focus:border-primary dark:focus:border-primary-dark bg-surface dark:bg-surface-dark text-text dark:text-text-dark placeholder-text-muted dark:placeholder-text-dark_muted"
                        ></textarea>
                    </div>

                    <div className="flex flex-col sm:flex-row sm:items-center pt-4 gap-3 border-t border-slate-200 dark:border-slate-700">
                        {isEditing && onDelete && (
                            <Button type="button" variant="danger" onClick={handleDeleteLocal} className="w-full sm:w-auto sm:mr-auto order-last sm:order-first" leftIcon={<TrashIcon className="h-4 w-4"/>}>
                                Удалить
                            </Button>
                        )}
                        <div className={`flex flex-1 space-x-3 ${!isEditing || !onDelete ? 'sm:ml-auto' : ''}`}> {/* Условие для ml-auto */}
                            <Button type="button" variant="secondary" onClick={onClose} className="flex-1 sm:flex-initial">Отмена</Button>
                            <Button type="submit" variant="primary" className="flex-1 sm:flex-initial">
                                {isEditing ? 'Сохранить' : 'Добавить'}
                            </Button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default TransactionModal;

###############################################################################
# FILE: src\components\ui\Button.jsx
###############################################################################

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({
                    children,
                    variant = 'primary',
                    fullWidth = false,
                    className = '',
                    leftIcon, // Новый проп для иконки слева
                    rightIcon, // Новый проп для иконки справа
                    disabled, // Стандартный HTML атрибут
                    ...props
                }) => {
    const baseStyle = "inline-flex items-center justify-center py-2.5 px-5 text-sm font-medium rounded-lg focus:outline-none focus:ring-4 transition-all duration-150 ease-in-out disabled:opacity-60 disabled:cursor-not-allowed";
    const widthStyle = fullWidth ? "w-full" : "";

    let variantStyle = '';
    switch (variant) {
        case 'secondary':
            variantStyle = "text-text bg-surface dark:text-text-dark dark:bg-surface-dark border border-slate-300 dark:border-slate-600 hover:bg-slate-100 dark:hover:bg-slate-700 focus:ring-slate-300 dark:focus:ring-slate-500";
            break;
        case 'danger':
            variantStyle = "text-white bg-error dark:bg-error-dark hover:bg-red-700 dark:hover:bg-red-600 focus:ring-red-300 dark:focus:ring-red-900";
            break;
        case 'success': // Добавим вариант success
            variantStyle = "text-white bg-success dark:bg-success-dark hover:bg-green-700 dark:hover:bg-green-600 focus:ring-green-300 dark:focus:ring-green-800";
            break;
        case 'primary':
        default:
            variantStyle = "text-white bg-primary dark:bg-primary-dark hover:bg-primary-hover dark:hover:bg-primary-dark_hover focus:ring-primary/50 dark:focus:ring-primary-dark/50";
            break;
    }

    return (
        <button
            className={`${baseStyle} ${variantStyle} ${widthStyle} ${className}`}
            disabled={disabled}
            {...props}
        >
            {leftIcon && <span className="mr-2">{leftIcon}</span>}
            {children}
            {rightIcon && <span className="ml-2">{rightIcon}</span>}
        </button>
    );
};

export default Button;

###############################################################################
# FILE: src\components\ui\CategoryIcons.jsx
###############################################################################

// frontend/src/components/ui/CategoryIcons.jsx
import React from 'react';
import {
    ShoppingCartIcon, // Продукты
    BuildingLibraryIcon, // Зарплата (или BriefcaseIcon)
    TruckIcon, // Транспорт
    TicketIcon, // Развлечения (или FilmIcon)
    HomeModernIcon, // Коммунальные платежи (или BuildingOfficeIcon)
    AcademicCapIcon, // Образование
    GiftIcon, // Подарки
    HeartIcon, // Здоровье
    CurrencyDollarIcon, // Инвестиции, Общее
    SparklesIcon, // Хобби
    WrenchScrewdriverIcon, // Ремонт
    GlobeAltIcon, // Путешествия
    PhoneIcon, // Связь
    ComputerDesktopIcon, // Фриланс, Техника
    BanknotesIcon, // Сбережения
    QuestionMarkCircleIcon, // Другое (Placeholder)
    BriefcaseIcon, // Работа
    ReceiptPercentIcon, // Налоги, Скидки
    CreditCardIcon, // Кредиты, Карты
    ScaleIcon, // Законы, Штрафы
    UserGroupIcon, // Семья
    // Добавьте еще по необходимости
} from '@heroicons/react/24/outline';

export const iconMap = {
    ShoppingCartIcon,
    BuildingLibraryIcon,
    TruckIcon,
    TicketIcon,
    HomeModernIcon,
    AcademicCapIcon,
    GiftIcon,
    HeartIcon,
    CurrencyDollarIcon,
    SparklesIcon,
    WrenchScrewdriverIcon,
    GlobeAltIcon,
    PhoneIcon,
    ComputerDesktopIcon,
    BanknotesIcon,
    QuestionMarkCircleIcon,
    BriefcaseIcon,
    ReceiptPercentIcon,
    CreditCardIcon,
    ScaleIcon,
    UserGroupIcon,
};

export const defaultCategoryIconName = 'QuestionMarkCircleIcon'; // Иконка по умолчанию

// Компонент для рендеринга иконки по имени
export const CategoryIcon = ({ iconName, className = "h-5 w-5", ...props }) => {
    const IconComponent = iconMap[iconName] || iconMap[defaultCategoryIconName];
    return <IconComponent className={className} {...props} />;
};

// Список доступных иконок для выбора
export const availableIconsForPicker = Object.keys(iconMap).map(name => ({
    name,
    Component: iconMap[name]
}));

// Цветовая палитра для выбора (соответствует вашим скриншотам, можно настроить)
export const availableColorsForPicker = [
    // Яркие и пастельные цвета
    'bg-red-400', 'bg-orange-400', 'bg-amber-400', 'bg-yellow-400', 'bg-lime-400',
    'bg-green-400', 'bg-emerald-400', 'bg-teal-400', 'bg-cyan-400', 'bg-sky-400',
    'bg-blue-400', 'bg-indigo-400', 'bg-violet-400', 'bg-purple-400', 'bg-fuchsia-400',
    'bg-pink-400', 'bg-rose-400',
    // Более темные/насыщенные
    'bg-red-600', 'bg-orange-600', 'bg-green-600', 'bg-blue-600', 'bg-purple-600',
    // Нейтральные
    'bg-slate-500', 'bg-gray-500',
];
// Эти цвета уже есть в вашем `SettingsPage.jsx`, можно их оттуда импортировать или оставить здесь
// Это просто для примера, чтобы показать откуда берутся `availableColorsForPicker`
// Если у вас `availableColors` в `SettingsPage.jsx`, то просто используйте его.

###############################################################################
# FILE: src\components\ui\Input.jsx
###############################################################################

// src/components/ui/Input.jsx
import React from 'react';

const Input = ({
                   label,
                   id,
                   icon,
                   error,
                   className = '',
                   wrapperClassName = '',
                   inputClassName = '',
                   labelClassName = '', // <-- Добавлено
                   themeVariant = 'default',
                   ...props
               }) => {
    const baseInputStyle = "block w-full p-2.5 text-sm rounded-lg border";
    let currentInputStyle = `${baseInputStyle} `;

    if (themeVariant === 'auth') {
        currentInputStyle += "bg-authInputBg border-authInputBorder placeholder-authPlaceholder text-slate-200 focus:ring-primary-dark focus:border-primary-dark";
    } else {
        currentInputStyle += "bg-surface border-slate-300 text-text placeholder-slate-400 focus:ring-primary focus:border-primary dark:bg-surface-dark dark:border-slate-600 dark:text-text-dark dark:placeholder-slate-500 dark:focus:ring-primary-dark dark:focus:border-primary-dark";
    }

    const iconPadding = icon ? "pl-10" : "";
    const errorRingStyle = 'focus:ring-error dark:focus:ring-error-dark focus:border-error dark:focus:border-error-dark';
    const defaultRingStyle = themeVariant === 'auth'
        ? 'focus:ring-primary-dark focus:border-primary-dark'
        : 'focus:ring-primary dark:focus:ring-primary-dark focus:border-primary dark:focus:border-primary-dark';

    const errorBorderStyle = error ? 'border-error dark:border-error-dark' : (themeVariant === 'auth' ? 'border-authInputBorder' : 'border-slate-300 dark:border-slate-600');
    const ringStyle = error ? errorRingStyle : defaultRingStyle;

    return (
        <div className={`mb-4 ${wrapperClassName}`}>
            {label && (
                <label htmlFor={id} className={`block mb-2 text-sm font-medium ${labelClassName || 'text-text dark:text-text-dark_muted'}`}>
                    {label}
                </label>
            )}
            <div className="relative">
                {icon && (
                    <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        {React.cloneElement(icon, { className: `${icon.props.className || ''} h-5 w-5 text-text-muted dark:text-text-dark_muted` })}
                    </div>
                )}
                <input
                    id={id}
                    className={`${currentInputStyle} ${iconPadding} ${errorBorderStyle} ${ringStyle} ${inputClassName} ${className}`}
                    {...props}
                />
            </div>
            {error && <p className="mt-1 text-xs text-error dark:text-error-dark">{error}</p>}
        </div>
    );
};

export default Input;

###############################################################################
# FILE: src\pages\Auth\LoginPage.jsx
###############################################################################

// src/pages/Auth/LoginPage.jsx
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import Button from '../../components/ui/Button.jsx';
import Input from '../../components/ui/Input.jsx';
import { EnvelopeIcon, LockClosedIcon, BuildingStorefrontIcon } from '@heroicons/react/24/outline'; // Changed icon
import { useAuth } from '../../context/AuthContext.jsx';

// Предполагается, что auth-bg.jpg находится в public или src/assets
// Если в src/assets, то импортировать: import AuthBackground from '../../assets/auth-bg.jpg';
// const backgroundStyle = { backgroundImage: `url(${AuthBackground})` };
// Пока используем градиент, если изображение не настроено.
const backgroundStyle = { backgroundImage: `url('/auth-bg.jpg')` }; // Если auth-bg.jpg в /public

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [fieldErrors, setFieldErrors] = useState({});
    const [formError, setFormError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    // const navigate = useNavigate(); // navigate теперь внутри useAuth().login
    const location = useLocation();
    const { login } = useAuth();

    const validateFields = () => {
        const newErrors = {};
        if (!email) newErrors.email = "Email обязателен";
        else if (!/\S+@\S+\.\S+/.test(email)) newErrors.email = "Некорректный email";
        if (!password) newErrors.password = "Пароль обязателен";
        setFieldErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setFormError('');
        if (validateFields()) {
            setIsLoading(true);
            const result = await login(email, password);
            setIsLoading(false);
            if (!result.success) {
                setFormError(result.message || "Ошибка входа. Пожалуйста, проверьте ваши данные.");
            }
            // navigate (если логин успешен) происходит внутри AuthContext.login
        }
    };

    return (
        <div
            className="min-h-screen flex items-center justify-center p-4 bg-cover bg-center"
            style={backgroundStyle} // Применяем фон
        >
            <div className="bg-slate-800/80 dark:bg-slate-900/80 backdrop-blur-md p-8 sm:p-10 rounded-xl shadow-2xl w-full max-w-md border border-slate-700">
                <div className="flex flex-col items-center mb-8">
                    {/* <BuildingStorefrontIcon className="h-16 w-16 text-primary dark:text-primary-dark mb-3" /> */}
                    <img src="/free-icon-coin-4153647.png" alt="CoinKeeper Logo" className="h-16 w-16 mb-3" />
                    <h1 className="text-3xl font-bold text-white">CoinKeeper</h1>
                    <p className="text-slate-300 dark:text-slate-400">Войдите, чтобы управлять финансами</p>
                </div>

                {formError && (
                    <div className="mb-4 p-3 bg-red-500/30 border border-red-600 text-red-200 rounded-md text-sm text-center">
                        {formError}
                    </div>
                )}

                <form onSubmit={handleSubmit} noValidate className="space-y-6">
                    <Input
                        id="email" type="email" label="Email" placeholder="your@email.com"
                        value={email} onChange={(e) => setEmail(e.target.value)}
                        error={fieldErrors.email} icon={<EnvelopeIcon />}
                        themeVariant="auth"
                        labelClassName="text-slate-300 dark:text-slate-400"
                    />
                    <Input
                        id="password" type="password" label="Пароль" placeholder="••••••••"
                        value={password} onChange={(e) => setPassword(e.target.value)}
                        error={fieldErrors.password} icon={<LockClosedIcon />}
                        themeVariant="auth"
                        labelClassName="text-slate-300 dark:text-slate-400"
                    />
                    <Button type="submit" fullWidth className="mt-8 py-3 text-base !bg-primary hover:!bg-primary-hover dark:!bg-primary-dark dark:hover:!bg-primary-dark_hover" disabled={isLoading}>
                        {isLoading ? 'Вход...' : 'Войти'}
                    </Button>
                </form>
                <p className="text-sm text-center mt-8 text-slate-400 dark:text-slate-500">
                    Нет аккаунта?{' '}
                    <Link
                        to="/register"
                        state={{ from: location.state?.from }}
                        className="font-medium text-primary-light dark:text-primary-dark hover:underline"
                    >
                        Зарегистрироваться
                    </Link>
                </p>
            </div>
        </div>
    );
};
export default LoginPage;

###############################################################################
# FILE: src\pages\Auth\RegisterPage.jsx
###############################################################################

// src/pages/Auth/RegisterPage.jsx
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import Button from '../../components/ui/Button.jsx';
import Input from '../../components/ui/Input.jsx';
import { EnvelopeIcon, LockClosedIcon, UserPlusIcon, BuildingStorefrontIcon } from '@heroicons/react/24/outline'; // Changed icon
import { useAuth } from '../../context/AuthContext.jsx';

// const backgroundStyle = { backgroundImage: `url('/path/to/your/auth-bg.jpg')` };
// Пока используем градиент, если изображение не настроено.
const backgroundStyle = { backgroundImage: `url('/auth-bg.jpg')` }; // Если auth-bg.jpg в /public


const RegisterPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [fieldErrors, setFieldErrors] = useState({});
    const [formError, setFormError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isSuccess, setIsSuccess] = useState(false);
    const navigate = useNavigate();
    const location = useLocation();
    const { register } = useAuth();

    const validateFields = () => {
        const newErrors = {};
        if (!email) newErrors.email = "Email обязателен";
        else if (!/\S+@\S+\.\S+/.test(email)) newErrors.email = "Некорректный email";

        if (!password) newErrors.password = "Пароль обязателен";
        else if (password.length < 6) newErrors.password = "Пароль должен быть не менее 6 символов";

        if (!confirmPassword) newErrors.confirmPassword = "Подтверждение пароля обязательно";
        else if (password !== confirmPassword) newErrors.confirmPassword = "Пароли не совпадают";

        setFieldErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setFormError('');
        setIsSuccess(false);
        if (validateFields()) {
            setIsLoading(true);
            const result = await register(email, password); // register из AuthContext
            setIsLoading(false);
            if (result.success) {
                setIsSuccess(true);
            } else {
                setFormError(result.message || "Ошибка регистрации. Пожалуйста, попробуйте еще раз.");
            }
        }
    };

    if (isSuccess) {
        return (
            <div
                className="min-h-screen flex items-center justify-center p-4 bg-cover bg-center"
                style={backgroundStyle}
            >
                <div className="bg-slate-800/80 dark:bg-slate-900/80 backdrop-blur-md p-8 sm:p-10 rounded-xl shadow-2xl w-full max-w-md text-center border border-slate-700">
                    <UserPlusIcon className="h-16 w-16 text-green-400 mx-auto mb-4" />
                    <h2 className="text-2xl font-semibold text-green-300 mb-4">Регистрация успешна!</h2>
                    <p className="text-slate-300 dark:text-slate-400 mb-6">Теперь вы можете войти, используя указанные данные.</p>
                    <Button
                        onClick={() => navigate('/login', { state: { from: location.state?.from } })}
                        fullWidth
                        className="py-3 text-base !bg-primary hover:!bg-primary-hover dark:!bg-primary-dark dark:hover:!bg-primary-dark_hover"
                    >
                        Перейти ко входу
                    </Button>
                </div>
            </div>
        );
    }

    return (
        <div
            className="min-h-screen flex items-center justify-center p-4 bg-cover bg-center"
            style={backgroundStyle}
        >
            <div className="bg-slate-800/80 dark:bg-slate-900/80 backdrop-blur-md p-8 sm:p-10 rounded-xl shadow-2xl w-full max-w-md border border-slate-700">
                <div className="flex flex-col items-center mb-8">
                    {/* <BuildingStorefrontIcon className="h-16 w-16 text-primary dark:text-primary-dark mb-3" /> */}
                    <img src="/free-icon-coin-4153647.png" alt="CoinKeeper Logo" className="h-16 w-16 mb-3" />
                    <h1 className="text-3xl font-bold text-white">CoinKeeper</h1>
                    <p className="text-slate-300 dark:text-slate-400">Создайте аккаунт для начала работы</p>
                </div>

                {formError && (
                    <div className="mb-4 p-3 bg-red-500/30 border border-red-600 text-red-200 rounded-md text-sm text-center">
                        {formError}
                    </div>
                )}

                <form onSubmit={handleSubmit} noValidate className="space-y-6">
                    <Input
                        id="email" type="email" label="Email" placeholder="your@email.com"
                        value={email} onChange={(e) => setEmail(e.target.value)}
                        error={fieldErrors.email} icon={<EnvelopeIcon />}
                        themeVariant="auth"
                        labelClassName="text-slate-300 dark:text-slate-400"
                    />
                    <Input
                        id="password" type="password" label="Пароль (мин. 6 символов)" placeholder="••••••••"
                        value={password} onChange={(e) => setPassword(e.target.value)}
                        error={fieldErrors.password} icon={<LockClosedIcon />}
                        themeVariant="auth"
                        labelClassName="text-slate-300 dark:text-slate-400"
                    />
                    <Input
                        id="confirmPassword" type="password" label="Подтвердите пароль" placeholder="••••••••"
                        value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}
                        error={fieldErrors.confirmPassword} icon={<LockClosedIcon />}
                        themeVariant="auth"
                        labelClassName="text-slate-300 dark:text-slate-400"
                    />
                    <Button type="submit" fullWidth className="mt-8 py-3 text-base !bg-primary hover:!bg-primary-hover dark:!bg-primary-dark dark:hover:!bg-primary-dark_hover" disabled={isLoading}>
                        {isLoading ? 'Регистрация...' : 'Зарегистрироваться'}
                    </Button>
                </form>
                <p className="text-sm text-center mt-8 text-slate-400 dark:text-slate-500">
                    Уже есть аккаунт?{' '}
                    <Link
                        to="/login"
                        state={{ from: location.state?.from }}
                        className="font-medium text-primary-light dark:text-primary-dark hover:underline"
                    >
                        Войти
                    </Link>
                </p>
            </div>
        </div>
    );
};
export default RegisterPage;

###############################################################################
# SUMMARY
# Total files: 42
# Total size: 132.47 KB
# Processing time: 0.21 seconds
###############################################################################
